{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/admin/admin.component.css","webpack:///./src/app/components/admin/admin.component.html","webpack:///./src/app/components/admin/admin.component.ts","webpack:///./src/app/components/board/board.component.css","webpack:///./src/app/components/board/board.component.html","webpack:///./src/app/components/board/board.component.ts","webpack:///./src/app/components/game/game.component.css","webpack:///./src/app/components/game/game.component.html","webpack:///./src/app/components/game/game.component.ts","webpack:///./src/app/components/home/home.component.css","webpack:///./src/app/components/home/home.component.html","webpack:///./src/app/components/home/home.component.ts","webpack:///./src/app/components/login/login.component.css","webpack:///./src/app/components/login/login.component.html","webpack:///./src/app/components/login/login.component.ts","webpack:///./src/app/components/modify/modify.component.css","webpack:///./src/app/components/modify/modify.component.html","webpack:///./src/app/components/modify/modify.component.ts","webpack:///./src/app/components/no-page/no-page.component.css","webpack:///./src/app/components/no-page/no-page.component.html","webpack:///./src/app/components/no-page/no-page.component.ts","webpack:///./src/app/components/profile/profile.component.css","webpack:///./src/app/components/profile/profile.component.html","webpack:///./src/app/components/profile/profile.component.ts","webpack:///./src/app/components/register/register.component.css","webpack:///./src/app/components/register/register.component.html","webpack:///./src/app/components/register/register.component.ts","webpack:///./src/app/components/test/test.component.css","webpack:///./src/app/components/test/test.component.html","webpack:///./src/app/components/test/test.component.ts","webpack:///./src/app/components/tool/tool.component.css","webpack:///./src/app/components/tool/tool.component.html","webpack:///./src/app/components/tool/tool.component.ts","webpack:///./src/app/components/write/write.component.css","webpack:///./src/app/components/write/write.component.html","webpack:///./src/app/components/write/write.component.ts","webpack:///./src/app/guards/auth.guard.ts","webpack:///./src/app/services/auth.service.ts","webpack:///./src/app/services/board.service.ts","webpack:///./src/app/services/func.service.ts","webpack:///./src/app/services/game.service.ts","webpack:///./src/app/services/validate.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts","webpack:///./src/pipes/youtube.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div class=\\\"mdl-demo mdl-base\\\">\\r\\n  <div class=\\\"mdl-layout mdl-js-layout mdl-layout--fixed-tabs\\\">\\r\\n    <!-- <app-navbar></app-navbar> -->\\r\\n\\r\\n    <!-- header for large display -->\\r\\n    <header class=\\\"mdl-layout__header mdl-layout__header--scroll mdl-color--primary\\\">\\r\\n            \\r\\n      <!-- spacing -->\\r\\n      <div class=\\\"mdl-layout--large-screen-only mdl-layout__header-row\\\"></div>\\r\\n      \\r\\n      <!-- title -->\\r\\n      <div class=\\\"mdl-layout--large-screen-only mdl-layout__header-row\\\">\\r\\n        <h3 [routerLink]=\\\"['/']\\\" style=\\\"cursor: pointer; font-family: 'Ubuntu', sans-serif;\\\">{{siteName}}</h3>\\r\\n        <div class=\\\"mdl-layout-spacer\\\"></div>\\r\\n        <nav class=\\\"mdl-navigation\\\" [routerLinkActive]=\\\"['active']\\\" [routerLinkActiveOptions]=\\\"{exact:true}\\\" >\\r\\n          <a class=\\\"mdl-navigation__link\\\" *ngIf=\\\"!authService.loggedIn()\\\" [routerLink]=\\\"['/login']\\\">LOGIN</a>\\r\\n          <a class=\\\"mdl-navigation__link\\\" *ngIf=\\\"authService.loggedIn()\\\" [routerLink]=\\\"['/profile']\\\">PROFILE</a>\\r\\n          <a class=\\\"mdl-navigation__link\\\" *ngIf=\\\"authService.loggedIn()\\\" (click)=\\\"onLogoutClick()\\\" href=\\\"#\\\">LOGOUT</a>\\r\\n        </nav>\\r\\n      </div>\\r\\n      \\r\\n      <!-- spacing -->\\r\\n      <div class=\\\"mdl-layout--large-screen-only mdl-layout__header-row\\\"></div>\\r\\n\\r\\n      <!-- nav bar -->\\r\\n      <nav mat-tab-nav-bar mat-stretch-tabs\\r\\n        mat-align-tabs=\\\"center\\\"\\r\\n        [color]=\\\"'primary'\\\"\\r\\n        [backgroundColor]=\\\"'accent'\\\"\\r\\n        style=\\\"border-bottom-color: black;\\\">\\r\\n        <a mat-tab-link *ngFor=\\\"let link of navLinks\\\"\\r\\n          (click)=\\\"activeLink = link.path\\\"\\r\\n          [routerLink]=\\\"[link.path]\\\"\\r\\n          [active]=\\\"activeLink == link.path\\\">{{link.label}}</a>\\r\\n      </nav>\\r\\n\\r\\n    </header>\\r\\n\\r\\n    <!-- header for mobile -->\\r\\n    <header class=\\\"mdl-layout__header--scroll mdl-layout--small-screen-only mdl-color--primary\\\">\\r\\n      <div class=\\\"mdl-layout__header-row\\\">\\r\\n        <h3 class=\\\"mdl-navigation__link\\\" style=\\\"font-family: 'Ubuntu', sans-serif;\\\">{{siteName}}</h3>\\r\\n        <div class=\\\"mdl-layout-spacer\\\"></div>\\r\\n        <nav class=\\\"mdl-navigation\\\">\\r\\n          <a *ngIf=\\\"!authService.loggedIn()\\\" class=\\\"mdl-navigation__link\\\" [routerLink]=\\\"['/login']\\\">LOGIN</a>\\r\\n          <a *ngIf=\\\"authService.loggedIn()\\\" class=\\\"mdl-navigation__link\\\" [routerLink]=\\\"['/profile']\\\">PROFILE</a>\\r\\n          <a *ngIf=\\\"authService.loggedIn()\\\" class=\\\"mdl-navigation__link\\\" (click)=\\\"onLogoutClick()\\\" href=\\\"#\\\">LOGOUT</a>\\r\\n        </nav>\\r\\n      </div>\\r\\n    </header>\\r\\n    <div class=\\\"mdl-layout__drawer mdl-layout--small-screen-only\\\">\\r\\n      <span class=\\\"mdl-layout__title\\\" style=\\\"font-family: 'Ubuntu', sans-serif;\\\">{{siteName}}</span>\\r\\n      <nav class=\\\"mdl-navigation\\\">\\r\\n        <a class=\\\"mdl-navigation__link\\\" *ngFor=\\\"let link of navLinks\\\"\\r\\n          [routerLink]=\\\"[link.path]\\\">{{link.label}}</a>\\r\\n      </nav>\\r\\n    </div>\\r\\n\\r\\n    <ng-flash-message></ng-flash-message>\\r\\n    <main class=\\\"mdl-layout__content\\\">\\r\\n      <div class=\\\"mdl-layout__tab-panel is-active\\\" id=\\\"overview\\\">\\r\\n        <router-outlet></router-outlet>\\r\\n        <br/><br/>\\r\\n      </div>\\r\\n\\r\\n      <!-- footer -->\\r\\n      <footer class=\\\"mdl-mega-footer\\\">\\r\\n        <div class=\\\"mdl-mega-footer--bottom-section\\\">\\r\\n          <div class=\\\"mdl-logo\\\">\\r\\n            powered by Project RogueWrite\\r\\n          </div>\\r\\n          <ul class=\\\"mdl-mega-footer--link-list\\\">\\r\\n            <li><a target=\\\"_blank\\\" href=\\\"https://getmdl.io/index.html\\\">MDL</a></li>\\r\\n            <li><a target=\\\"_blank\\\" href=\\\"https://material.angular.io/\\\">Angular Material</a></li>\\r\\n            <li><a target=\\\"_blank\\\" href=\\\"https://github.com/p9595jh/RogueWrite\\\">Github</a></li>\\r\\n          </ul>\\r\\n        </div>\\r\\n      </footer>\\r\\n      <!-- footer -->\\r\\n\\r\\n    </main>\\r\\n  </div>\\r\\n</div>\\r\\n\"","import { Component } from '@angular/core';\r\nimport { AuthService } from './services/auth.service';\r\nimport { NgFlashMessageService } from 'ng-flash-messages';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  siteName = 'ЯogueWrite';\r\n  navLinks = [\r\n    { label: 'HOME', path: '/' },\r\n    { label: '자유게시판', path: '/board/free/list' },\r\n    { label: '게임게시판', path: '/game' },\r\n    { label: 'FORTH', path: '/register' },\r\n    { label: 'FIFTH', path: '/write/free' }\r\n  ];\r\n  activeLink = this.navLinks[0];\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private flashMessage: NgFlashMessageService\r\n  ) { }\r\n\r\n  onLogoutClick() {\r\n    this.authService.logout();\r\n    this.flashMessage.showFlashMessage({\r\n      messages: ['로그아웃 되었습니다.'], \r\n      type: 'success', \r\n      timeout: 2000\r\n    });\r\n    // this.router.navigate([this.funcService.getPreviousUrl()]);\r\n    this.router.navigate(['/login']);\r\n    return false;\r\n  }\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule, NO_ERRORS_SCHEMA, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpModule } from '@angular/http';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport {  // angular-material modules\r\n  ErrorStateMatcher,\r\n  ShowOnDirtyErrorStateMatcher,\r\n  MatInputModule,\r\n  MatTableModule,\r\n  MatFormFieldModule,\r\n  MatButtonModule,\r\n  MatToolbarModule,\r\n  MatTabsModule,\r\n  MatMenuModule,\r\n  MatIconModule,\r\n  MatSelectModule,\r\n  MatBottomSheetModule,\r\n  MatSidenavModule,\r\n  MatListModule,\r\n  MatAutocompleteModule,\r\n  MatButtonToggleModule,\r\n  MatPaginatorModule,\r\n  MatSnackBarModule\r\n} from '@angular/material';\r\n\r\nimport { ValidateService } from './services/validate.service';\r\nimport { AuthService } from './services/auth.service';\r\nimport { NgFlashMessagesModule } from 'ng-flash-messages';\r\nimport { FroalaEditorModule, FroalaViewModule } from 'angular-froala-wysiwyg';\r\nimport { FileSelectDirective } from 'ng2-file-upload';\r\nimport { AuthGuard } from './guards/auth.guard';\r\nimport { Youtube } from '../pipes/youtube';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { RegisterComponent } from './components/register/register.component';\r\nimport { HomeComponent } from './components/home/home.component';\r\nimport { ProfileComponent } from './components/profile/profile.component';\r\nimport { ModifyComponent } from './components/modify/modify.component';\r\nimport { BoardComponent } from './components/board/board.component';\r\nimport { WriteComponent } from './components/write/write.component';\r\nimport { TestComponent } from './components/test/test.component';\r\nimport { NoPageComponent } from './components/no-page/no-page.component';\r\nimport { AdminComponent } from './components/admin/admin.component';\r\nimport { ToolComponent } from './components/tool/tool.component';\r\nimport { GameComponent } from './components/game/game.component';\r\n\r\nconst appRoutes: Routes = [\r\n  { path: '', component: HomeComponent },\r\n  { path: 'register', component: RegisterComponent },\r\n  { path: 'login', component: LoginComponent },\r\n  { path: 'profile', component: ProfileComponent, canActivate: [AuthGuard] },\r\n  { path: 'modify', component: ModifyComponent, canActivate: [AuthGuard] },\r\n  { path: 'board/:type/:num', component: BoardComponent },\r\n  { path: 'write/:type', component: WriteComponent, canActivate: [AuthGuard] },\r\n  { path: 'test', component: TestComponent },\r\n  { path: 'no-page', component: NoPageComponent },\r\n  { path: 'admin', component: AdminComponent, canActivate: [AuthGuard] },\r\n  { path: 'tool', component: ToolComponent/*, canActivate: [AuthGuard]*/ }\r\n]\r\n\r\n@NgModule({\r\n  declarations: [\r\n    Youtube,\r\n    FileSelectDirective,\r\n    AppComponent,\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    HomeComponent,\r\n    ProfileComponent,\r\n    ModifyComponent,\r\n    BoardComponent,\r\n    WriteComponent,\r\n    TestComponent,\r\n    NoPageComponent,\r\n    AdminComponent,\r\n    ToolComponent,\r\n    GameComponent\r\n  ],\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    FormsModule,\r\n    HttpModule,\r\n    HttpClientModule,\r\n    RouterModule.forRoot(appRoutes, {\r\n      useHash: true,\r\n      onSameUrlNavigation: 'reload'\r\n    }),\r\n    NgFlashMessagesModule,\r\n    CommonModule,\r\n    FroalaEditorModule.forRoot(),\r\n    FroalaViewModule.forRoot(),\r\n\r\n    MatTableModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    MatButtonModule,\r\n    MatToolbarModule,\r\n    MatTabsModule,\r\n    MatMenuModule,\r\n    MatIconModule,\r\n    MatSelectModule,\r\n    MatBottomSheetModule,\r\n    MatSidenavModule,\r\n    MatListModule,\r\n    MatAutocompleteModule,\r\n    MatButtonToggleModule,\r\n    MatPaginatorModule,\r\n    MatSnackBarModule\r\n  ],\r\n  exports: [\r\n    RouterModule\r\n  ],\r\n  providers: [\r\n    ValidateService,\r\n    AuthService,\r\n    AuthGuard,\r\n    { provide: ErrorStateMatcher, useClass: ShowOnDirtyErrorStateMatcher }\r\n  ],\r\n  bootstrap: [\r\n    AppComponent\r\n  ],\r\n  schemas: [\r\n    NO_ERRORS_SCHEMA,\r\n    CUSTOM_ELEMENTS_SCHEMA\r\n  ]\r\n})\r\nexport class AppModule { }\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvYWRtaW4vYWRtaW4uY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<section class=\\\"section--center mdl-grid mdl-grid--no-spacing mdl-shadow--2dp\\\">\\r\\n  <div class=\\\"mdl-card mdl-cell mdl-cell--12-col\\\">\\r\\n    <div class=\\\"mdl-card__supporting-text\\\">\\r\\n      <h4>어드민 게시판</h4>\\r\\n      <hr/>\\r\\n      \\r\\n      <!-- for large display -->\\r\\n      <table class=\\\"mdl-data-table mdl-js-data-table mdl-layout--large-screen-only\\\" style=\\\"margin: auto; width: 98%;\\\">\\r\\n        <thead>\\r\\n          <tr>\\r\\n            <th class=\\\"mdl-data-table__cell--non-numeric\\\">아이디</th>\\r\\n            <th class=\\\"mdl-data-table__cell--non-numeric\\\">닉네임</th>\\r\\n            <th>상태</th>\\r\\n          </tr>\\r\\n        </thead>\\r\\n        <tbody *ngFor=\\\"let val of users | slice:pagingFrom:pagingTo;\\\">\\r\\n          <tr *ngIf=\\\"val?.userid != 'admin'\\\">\\r\\n            <td class=\\\"mdl-data-table__cell--non-numeric\\\">\\r\\n              <span (click)=\\\"funcService.openInfoWindow(val?.userid)\\\" style=\\\"cursor: pointer;\\\">{{val.userid}}</span>\\r\\n            </td>\\r\\n            <td class=\\\"mdl-data-table__cell--non-numeric\\\">{{val.nickname}}</td>\\r\\n            <td *ngIf=\\\"val?.clean\\\">\\r\\n              <button mat-button color=\\\"primary\\\" (click)=\\\"administrate(val?._id, val?.clean)\\\">정상</button>\\r\\n            </td>\\r\\n            <td *ngIf=\\\"!val?.clean\\\">\\r\\n              <button mat-button color=\\\"warn\\\" (click)=\\\"administrate(val?._id, val?.clean)\\\">정지</button>\\r\\n            </td>\\r\\n          </tr>\\r\\n        </tbody>\\r\\n      </table><br/>\\r\\n\\r\\n      <mat-paginator [length]=\\\"users?.length\\\" [pageSize]=\\\"pagingSize\\\" (page)=\\\"paging($event)\\\">\\r\\n      </mat-paginator>\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n</section>\\r\\n\\r\\n<section></section>\\r\\n\"","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\nimport { FuncService } from '../../services/func.service';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { NgFlashMessageService } from 'ng-flash-messages';\r\nimport { PageEvent } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'app-admin',\r\n  templateUrl: './admin.component.html',\r\n  styleUrls: ['./admin.component.css']\r\n})\r\nexport class AdminComponent implements OnInit, OnDestroy {\r\n  navigationSubscription;\r\n\r\n  users: any[];\r\n\r\n  pagingSize = 25;\r\n  pagingFrom: Number = 0;\r\n  pagingTo: Number = this.pagingSize;\r\n\r\n  constructor(\r\n    private funcService: FuncService,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private flashMessage: NgFlashMessageService\r\n  ) {\r\n    this.funcService.setTitle('어드민');\r\n    this.navigationSubscription = this.router.events.subscribe((e: any) => {\r\n      if ( e instanceof NavigationEnd ) {\r\n        this.initialiseInvites();\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.authService.getProfile().subscribe(profile => {\r\n      if ( profile.user.userid != 'admin' ) {\r\n        this.router.navigate(['/no-page']);\r\n        return false;\r\n      } else {\r\n        this.authService.getAllUsers().subscribe(data => {\r\n          this.users = data.users;\r\n        });\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  initialiseInvites() {\r\n    this.ngOnInit();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if ( this.navigationSubscription ) {\r\n      this.navigationSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  paging(pageEvent: PageEvent) {\r\n    this.pagingFrom = pageEvent.pageIndex * this.pagingSize;\r\n    this.pagingTo = (pageEvent.pageIndex + 1) * this.pagingSize;\r\n    this.router.navigate(['/admin']);\r\n  }\r\n\r\n  administrate(_id, clean: Boolean) {\r\n    const work: string = clean ? '정지' : '해제';\r\n    if ( confirm(work + '하시겠습니까?') ) {\r\n      this.authService.administrateUser(_id, clean).subscribe(result => {\r\n        if ( result.success ) {\r\n          this.flashMessage.showFlashMessage({\r\n            messages: [work + '되었습니다.'], \r\n            type: 'success', \r\n            timeout: 2000\r\n          });\r\n          this.router.navigate(['/admin']);\r\n        } else {\r\n          this.flashMessage.showFlashMessage({\r\n            messages: [result.msg],\r\n            type: 'danger',\r\n            timeout: 3000\r\n          });\r\n        }\r\n      });\r\n    }\r\n    \r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvYm9hcmQvYm9hcmQuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<!-- element for representing the location of the post to be scrolled -->\\r\\n<span style=\\\"display: hidden;\\\" #postLocation></span>\\r\\n\\r\\n<!-- section for a post -->\\r\\n<section *ngIf=\\\"num != 'list'\\\" class=\\\"section--center mdl-grid mdl-grid--no-spacing mdl-shadow--2dp\\\">\\r\\n  <div class=\\\"mdl-card mdl-cell mdl-cell--12-col\\\">\\r\\n    <div class=\\\"mdl-card__supporting-text\\\">\\r\\n      <h4 style=\\\"display: inline;\\\">{{content?.title}}</h4>\\r\\n\\r\\n      <span style=\\\"float: right; text-align: right; font-size: 80%;\\\">\\r\\n        <span class=\\\"toProfile\\\" (click)=\\\"funcService.openInfoWindow(content?.userid)\\\">{{content?.nickname}}</span><br/>{{content?.writedate}}\\r\\n      </span>\\r\\n      <hr/>\\r\\n      <div class=\\\"posting content\\\" [innerHtml]=\\\"content?.content | youtube\\\"></div>\\r\\n      <br/><br/>\\r\\n      <div style=\\\"text-align: center;\\\">\\r\\n        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"onRecommend()\\\">\\r\\n          추천 {{content?.recommend?.length}}\\r\\n        </button>\\r\\n      </div>\\r\\n      <br/><hr/>\\r\\n\\r\\n      <!-- ############### table for comments ############### -->\\r\\n      <table style=\\\"width: 96%; margin: auto;\\\">\\r\\n        <tbody *ngFor=\\\"let comment of content?.comment\\\">\\r\\n          <tr>\\r\\n            <td style=\\\"width: 15%;\\\">\\r\\n              <img [attr.src]=\\\"'images/profile/' + comment.userid\\\" class=\\\"profileImage\\\" />\\r\\n            </td>\\r\\n            <td>\\r\\n              <span style=\\\"font-size: 80%;\\\">\\r\\n                <span class=\\\"toProfile\\\" (click)=\\\"funcService.openInfoWindow(comment?.userid)\\\">{{comment?.nickname}}</span> &nbsp;|&nbsp; \\r\\n                {{comment?.writedate}}\\r\\n                <span *ngIf=\\\"comment?.userid == user?.userid || user?.userid == 'admin'\\\"> &nbsp;|&nbsp; \\r\\n                  <span style=\\\"cursor: pointer;\\\" (click)=\\\"onRemoveComment(comment.num)\\\">삭제</span>\\r\\n                </span>\\r\\n              </span>\\r\\n              <pre class=\\\"content\\\" [innerHTML]=\\\"comment?.comment\\\"></pre><br/>\\r\\n            </td>\\r\\n          </tr>\\r\\n        </tbody>\\r\\n      </table><br/>\\r\\n      <!-- ############### table for comments ############### -->\\r\\n\\r\\n      <!-- ############### writing area ############### -->\\r\\n      <form *ngIf=\\\"authService.loggedIn()\\\" (submit)=\\\"onWriteComment()\\\"><hr *ngIf=\\\"content?.comment?.length > 0\\\" />\\r\\n        <table style=\\\"width: 96%; margin: auto;\\\">\\r\\n          <tr style=\\\"text-align: center;\\\">\\r\\n\\r\\n            <td rowspan=\\\"2\\\" style=\\\"width: 85%;\\\">\\r\\n              <mat-form-field appearance=\\\"outline\\\" style=\\\"width: 100%; height: 100%;\\\">\\r\\n                <mat-label>댓글을 작성해주세요.</mat-label>\\r\\n                <textarea matInput placeholder=\\\"\\\" rows=\\\"3\\\" name=\\\"cmtWrite\\\"\\r\\n                [formControl]=\\\"cmtWrite\\\" [matAutocomplete]=\\\"auto\\\"></textarea>\\r\\n                <mat-autocomplete #auto>\\r\\n                  <!-- <mat-option *ngFor=\\\"let ct of filteredOptions | async\\\" [value]=\\\"'TO::' + ct?.nickname\\\" (onclick)=\\\"setCmtTo(ct)\\\">\\r\\n                    {{ct.nickname}} [{{ct.userid}}]\\r\\n                  </mat-option> -->\\r\\n                </mat-autocomplete>\\r\\n              </mat-form-field>\\r\\n            </td>\\r\\n\\r\\n            <td style=\\\"text-align: center; padding-bottom: 3%;\\\">\\r\\n              <button mat-raised-button type=\\\"submit\\\" style=\\\"width: 60%;\\\">작성</button>\\r\\n            </td>\\r\\n\\r\\n          </tr>\\r\\n        </table>\\r\\n      </form>\\r\\n      <!-- ############### writing area ############### -->\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n  <button mat-icon-button [matMenuTriggerFor]=\\\"aboutPost\\\">\\r\\n    <mat-icon>more_vert</mat-icon>\\r\\n  </button>\\r\\n  <mat-menu #aboutPost>\\r\\n    <button mat-menu-item *ngIf=\\\"content?.userid == user?.userid || user?.userid == 'admin'\\\" (click)=\\\"onRemovePost()\\\">\\r\\n      <span>삭제</span>\\r\\n    </button>\\r\\n  </mat-menu>\\r\\n</section>\\r\\n\\r\\n<!-- section for a board -->\\r\\n<section class=\\\"section--center mdl-grid mdl-grid--no-spacing mdl-shadow--2dp\\\">\\r\\n  <div class=\\\"mdl-card mdl-cell mdl-cell--12-col\\\">\\r\\n    <div class=\\\"mdl-card__supporting-text\\\">\\r\\n      <h4 *ngIf=\\\"type == 'free'\\\">자유게시판</h4>\\r\\n      <h4 *ngIf=\\\"type != 'free'\\\">{{type}} 게시판</h4>\\r\\n      <hr/>\\r\\n      \\r\\n      <!-- for large display -->\\r\\n      <table class=\\\"mdl-data-table mdl-js-data-table mdl-layout--large-screen-only\\\" style=\\\"margin: auto; width: 98%;\\\">\\r\\n        <thead>\\r\\n          <tr>\\r\\n            <th class=\\\"mdl-data-table__cell--non-numeric\\\">날짜</th>\\r\\n            <th class=\\\"mdl-data-table__cell--non-numeric\\\">제목</th>\\r\\n            <th>글쓴이</th>\\r\\n            <th>조회수</th>\\r\\n            <th>추천</th>\\r\\n          </tr>\\r\\n        </thead>\\r\\n        <tbody *ngFor=\\\"let val of contents | slice:pagingFrom:pagingTo; let i=index\\\">\\r\\n          <tr>\\r\\n            <td class=\\\"mdl-data-table__cell--non-numeric\\\">{{extractDate(val.writedate)}}</td>\\r\\n            <td class=\\\"mdl-data-table__cell--non-numeric\\\">\\r\\n              <a [routerLink]=\\\"['/board/'+type+'/'+val?._id]\\\"\\r\\n                style=\\\"color: black; text-decoration: none; font-weight: 400;\\\"\\r\\n                (click)=\\\"scrollToPost(postLocation)\\\">{{val.title}}</a>&nbsp;\\r\\n              <span *ngIf=\\\"val.comment.length > 0\\\" style=\\\"font-size: 85%; color: grey;\\\">[{{val.comment.length}}]</span>\\r\\n            </td>\\r\\n            <td>\\r\\n              <span class=\\\"toProfile\\\" (click)=\\\"funcService.openInfoWindow(val?.userid)\\\">{{val.nickname}}</span>\\r\\n            </td>\\r\\n            <td>{{val.hit}}</td>\\r\\n            <td>{{val.recommend.length}}</td>\\r\\n          </tr>\\r\\n        </tbody>\\r\\n      </table>\\r\\n\\r\\n      <!-- for small display -->\\r\\n      <table class=\\\"mdl-data-table mdl-js-data-table mdl-layout--small-screen-only\\\" style=\\\"margin: auto; width: 98%;\\\">\\r\\n        <tbody *ngFor=\\\"let val of contents | slice:pagingFrom:pagingTo; let i=index\\\">\\r\\n          <tr>\\r\\n            <td class=\\\"mdl-data-table__cell--non-numeric\\\"\\r\\n              [routerLink]=\\\"['/board/'+type+'/'+val?._id]\\\" (click)=\\\"scrollToPost(postLocation)\\\">\\r\\n              <div>\\r\\n                <!-- <a [routerLink]=\\\"['/board/'+type+'/'+val?._id]\\\"\\r\\n                style=\\\"color: black; text-decoration: none; font-weight: 400;\\\"\\r\\n                (click)=\\\"scrollToPost(postLocation)\\\">{{val.title}}</a>&nbsp; -->\\r\\n                {{val.title}}\\r\\n                <span *ngIf=\\\"val.comment.length > 0\\\" style=\\\"color: grey;\\\">[{{val.comment.length}}]</span>\\r\\n              </div>\\r\\n              <div style=\\\"font-size: 85%; margin-top: 1%;\\\">\\r\\n                <span>{{val.nickname}}</span>&nbsp;&nbsp;&nbsp;\\r\\n                <span>조회 {{val.hit}}</span>&nbsp;&nbsp;&nbsp;\\r\\n                <span>추천 {{val.recommend.length}}</span>\\r\\n              </div>\\r\\n            </td>\\r\\n            <td>{{extractDate(val.writedate)}}</td>\\r\\n          </tr>\\r\\n        </tbody>\\r\\n      </table><br/>\\r\\n\\r\\n      <mat-paginator [length]=\\\"contents?.length\\\" [pageSize]=\\\"pagingSize\\\" (page)=\\\"paging($event)\\\">\\r\\n      </mat-paginator>\\r\\n\\r\\n      <div *ngIf=\\\"authService.loggedIn()\\\" style=\\\"float: right;\\\">\\r\\n        <a mat-raised-button [routerLink]=\\\"['/write/'+type]\\\">글쓰기</a>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <button mat-icon-button [matMenuTriggerFor]=\\\"board\\\">\\r\\n    <mat-icon>more_vert</mat-icon>\\r\\n  </button>\\r\\n  <mat-menu #board>\\r\\n    <button mat-menu-item *ngIf=\\\"authService.loggedIn()\\\">\\r\\n      <span>즐겨찾는 게시판 설정</span>\\r\\n    </button>\\r\\n  </mat-menu>\\r\\n</section>\\r\\n\\r\\n<section></section>\\r\\n\"","import { Component, OnInit, OnDestroy, Pipe, PipeTransform } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Http, Headers } from '@angular/http';\r\nimport { map } from 'rxjs/operators';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\n\r\nimport { FuncService } from '../../services/func.service';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { BoardService } from '../../services/board.service';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { NgFlashMessageService } from 'ng-flash-messages';\r\nimport { Observable } from 'rxjs';\r\nimport { FormControl } from '@angular/forms';\r\nimport { PageEvent } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'app-board',\r\n  templateUrl: './board.component.html',\r\n  styleUrls: ['./board.component.css']\r\n})\r\n@Pipe({ name: 'safeHtml' })\r\nexport class BoardComponent implements OnInit, OnDestroy, PipeTransform {\r\n  navigationSubscription;\r\n  filteredOptions: Observable<string[]>;  // not using for now; a function for commenting\r\n\r\n  type: String;\r\n  num: String;\r\n  content: any;\r\n  contents: Object[];\r\n  cmtWrite = new FormControl();\r\n  user: any;\r\n  \r\n  pagingSize = 25;\r\n  pagingFrom: Number = 0;\r\n  pagingTo: Number = this.pagingSize;\r\n\r\n  ct: any = null;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private funcService: FuncService,\r\n    private authService: AuthService,\r\n    private boardService: BoardService,\r\n    private http: Http,\r\n    private router: Router,\r\n    private sanitized: DomSanitizer,\r\n    private flashMessage: NgFlashMessageService\r\n  ) {\r\n    this.navigationSubscription = this.router.events.subscribe((e: any) => {\r\n      if ( e instanceof NavigationEnd ) {\r\n        this.initialiseInvites();\r\n      }\r\n    });\r\n    \r\n  }\r\n\r\n  transform(value) {\r\n    // return this.sanitized.bypassSecurityTrustHtml(value);\r\n    return this.sanitized.bypassSecurityTrustResourceUrl(value);\r\n  }\r\n\r\n  extractDate(date) {\r\n    let writeDate = new Date(date);\r\n    let today = new Date();\r\n\r\n    let writeDateDay = writeDate.getDate();\r\n    let todayDate = today.getDate();\r\n\r\n    if ( writeDateDay != todayDate ) {\r\n      return (writeDate.getMonth() + 1) + '/' + writeDateDay;\r\n    } else {\r\n      if ( writeDate.getFullYear() == today.getFullYear() && writeDate.getMonth() == today.getMonth() ) {\r\n        let hour = writeDate.getHours();\r\n        let min = writeDate.getMinutes();\r\n        return (hour >= 10 ? hour : '0' + hour) + ':' + (min >= 10 ? min : '0' + min);\r\n      } else {\r\n        return (writeDate.getMonth() + 1) + '/' + writeDateDay;\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  scrollToPost(el: HTMLElement) {\r\n    el.scrollIntoView();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.type = this.route.snapshot.paramMap.get('type');\r\n    this.num = this.route.snapshot.paramMap.get('num');\r\n\r\n    this.setFilteredOptions();\r\n    this.boardService.takeAllPosts(this.type).subscribe(data => {\r\n      this.contents = data.posts;\r\n      if ( this.num != 'list' ) {\r\n        this.boardService.takeOnePost(this.num).subscribe(result => {\r\n          if ( result.fail ) {\r\n            this.router.navigate(['/no-page']);\r\n            return false;\r\n          }\r\n          this.content = result.post;\r\n          this.funcService.setTitle(this.content.title + ' :: ' + (this.type == 'free' ? '자유게시판' : this.type + ' 게시판'));\r\n          if ( this.authService.loggedIn() ) {\r\n            this.authService.getProfile().subscribe(profile => {\r\n              this.user = profile.user;\r\n            });\r\n          }\r\n        });\r\n      } else this.funcService.setTitle(this.type == 'free' ? '자유게시판' : this.type + ' 게시판');\r\n    });\r\n\r\n  }\r\n\r\n  initialiseInvites() {\r\n    this.ngOnInit();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if ( this.navigationSubscription ) {\r\n      this.navigationSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  private setFilteredOptions() {\r\n    this.filteredOptions = this.cmtWrite.valueChanges.pipe(\r\n      // startWith('TO::'),\r\n      map(value => this._filter(value))\r\n    );\r\n  }\r\n\r\n  private _filter(value: string): any[] {\r\n    const filterValue = value.toLowerCase();\r\n    // [https://material.angular.io/components/autocomplete/overview]\r\n    // return this.options.filter(option => option.toLowerCase().includes(filterValue));\r\n    // let f = [];\r\n    // for (let i=0; i<this.foods.length; i++) {\r\n    //   f[i] = 'TO::' + this.foods[i].viewValue + ' [' + this.foods[i].value + '] ';\r\n    // }\r\n    // return f.filter(option => option.toLowerCase().includes(filterValue));\r\n    // return this.foods;\r\n    return this.content.comment;\r\n  }\r\n\r\n  setCmtTo(ct: any) {\r\n    this.ct = ct;\r\n  }\r\n\r\n  onWriteComment() {\r\n    const formData = {\r\n      comment: this.cmtWrite.value,\r\n      _id: this.num\r\n    };\r\n    this.boardService.writeComment(formData).subscribe(data => {\r\n      if ( data.success ) {\r\n        this.router.navigate(['/board/' + this.type + '/' + this.num]);\r\n      } else {\r\n        this.flashMessage.showFlashMessage({\r\n          messages: ['댓글 작성 오류'], \r\n          type: 'danger', \r\n          timeout: 3000\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  onRemovePost() {\r\n    if ( confirm('삭제하시겠습니까?') ) {\r\n      this.boardService.removePost(this.num).subscribe(result => {\r\n        if ( result.success ) {\r\n          this.router.navigate(['/board/' + this.type + '/list']);\r\n        } else {\r\n          this.flashMessage.showFlashMessage({\r\n            messages: ['삭제 오류'], \r\n            type: 'danger', \r\n            timeout: 3000\r\n          });\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  onRemoveComment(cmtNum) {\r\n    if ( confirm('삭제하시겠습니까?') ) {\r\n      this.boardService.removeComment(this.num, cmtNum).subscribe(result => {\r\n        if ( result.success ) {\r\n          this.router.navigate(['/board/' + this.type + '/' + this.num]);\r\n        } else {\r\n          this.flashMessage.showFlashMessage({\r\n            messages: ['삭제 오류'], \r\n            type: 'danger', \r\n            timeout: 3000\r\n          });\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  onRecommend() {\r\n    if ( !this.authService.loggedIn() ) {\r\n      this.flashMessage.showFlashMessage({\r\n        messages: ['로그인 후 이용하실 수 있습니다.'], \r\n        type: 'danger', \r\n        timeout: 3000\r\n      });\r\n    } else {\r\n      this.boardService.recommend(this.num).subscribe(result => {\r\n        if ( result.success ) {\r\n          this.router.navigate(['/board/' + this.type + '/' + this.num]);\r\n        } else {\r\n          this.flashMessage.showFlashMessage({\r\n            messages: [result.msg], \r\n            type: 'danger', \r\n            timeout: 3000\r\n          });\r\n        }\r\n      })\r\n    }\r\n    \r\n  }\r\n\r\n  paging(pageEvent: PageEvent) {\r\n    this.pagingFrom = pageEvent.pageIndex * this.pagingSize;\r\n    this.pagingTo = (pageEvent.pageIndex + 1) * this.pagingSize;\r\n    this.router.navigate(['/board/' + this.type + '/' + this.num]);\r\n  }\r\n\r\n}\r\n","module.exports = \".recommends {\\r\\n    text-align: center;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9nYW1lL2dhbWUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGtCQUFrQjtBQUN0QiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZ2FtZS9nYW1lLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIucmVjb21tZW5kcyB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuIl19 */\"","module.exports = \"<!-- element for representing the location of the post to be scrolled -->\\r\\n<span style=\\\"display: hidden;\\\" #postLocation></span>\\r\\n\\r\\n<!-- section for a post -->\\r\\n<section *ngIf=\\\"num != 'list'\\\" class=\\\"section--center mdl-grid mdl-grid--no-spacing mdl-shadow--2dp\\\">\\r\\n  <div class=\\\"mdl-card mdl-cell mdl-cell--12-col\\\">\\r\\n    <div class=\\\"mdl-card__supporting-text\\\">\\r\\n      <h4 style=\\\"display: inline;\\\">{{content?.title}}</h4>\\r\\n\\r\\n      <span style=\\\"float: right; text-align: right; font-size: 80%;\\\">\\r\\n        <span class=\\\"toProfile\\\" (click)=\\\"funcService.openInfoWindow(content?.userid)\\\">{{content?.nickname}}</span><br/>{{content?.writedate}}\\r\\n      </span>\\r\\n      <hr/>\\r\\n      <!-- ############### ENGINE WILL BE PLACED HERE ############### -->\\r\\n      <!-- <div class=\\\"posting content\\\" [innerHtml]=\\\"content?.content | youtube\\\"></div> -->\\r\\n      <div class=\\\"posting\\\">\\r\\n        <div #stage_content>{{text.content}}</div>\\r\\n        <table>\\r\\n          <tbody *ngFor=\\\"let choice of text.choice\\\">\\r\\n            <tr>\\r\\n              <td>{{choice.choice_num}}</td>\\r\\n              <td (click)=\\\"select(choice?.set_param)\\\">{{choice.content}}</td>\\r\\n            </tr>\\r\\n          </tbody>\\r\\n        </table>\\r\\n      </div>\\r\\n\\r\\n      <div>{{content?.content}}</div>\\r\\n      <br/><br/>\\r\\n\\r\\n      <!-- not logging in -->\\r\\n      <!-- <div class=\\\"recommends\\\" *ngIf=\\\"!funcService.loggedIn()\\\">\\r\\n        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"unloggedIn()\\\">\\r\\n          추천 {{content?.recommend}}\\r\\n        </button>\\r\\n        <button mat-raised-button color=\\\"accent\\\" (click)=\\\"unloggedIn()\\\">\\r\\n          비추천 {{content?.unrecommend}}\\r\\n        </button>\\r\\n      </div> -->\\r\\n\\r\\n      <!-- normal user -->\\r\\n      <!-- <div class=\\\"recommends\\\" *ngIf=\\\"funcService.loggedIn() && user?.userid != content?.userid && user?.userid != 'admin'\\\"> -->\\r\\n      <div class=\\\"recommends\\\" *ngIf=\\\"user?.userid != content?.userid && user?.userid != 'admin'\\\">\\r\\n        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"onRecommend(true)\\\">\\r\\n          추천 {{content?.recommend}}\\r\\n        </button>\\r\\n        <button mat-raised-button color=\\\"accent\\\" (click)=\\\"onRecommend(false)\\\">\\r\\n          비추천 {{content?.unrecommend}}\\r\\n        </button>\\r\\n      </div>\\r\\n\\r\\n      <!-- writer -->\\r\\n      <div class=\\\"recommends\\\" *ngIf=\\\"funcService.loggedIn() && user?.userid == content?.userid && user?.userid != 'admin'\\\">\\r\\n        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"onRecommend(true)\\\">\\r\\n          추천 {{content?.recommend}}\\r\\n        </button>\\r\\n        <button mat-raised-button color=\\\"accent\\\" (click)=\\\"onRecommend(false)\\\">\\r\\n          비추천 {{content?.unrecommend}}\\r\\n        </button>\\r\\n        <button mat-raised-button\\r\\n          *ngIf=\\\"content?.boardRequest == 0 && (content?.recommend - content?.unrecommend) >= 3\\\"\\r\\n          (click)=\\\"requestBoard()\\\">\\r\\n          게시판 생성 요청\\r\\n        </button>\\r\\n      </div>\\r\\n\\r\\n      <!-- admin -->\\r\\n      <div class=\\\"recommends\\\" *ngIf=\\\"funcService.loggedIn() && user?.userid == 'admin'\\\">\\r\\n        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"onRecommend(true)\\\">\\r\\n          추천 {{content?.recommend}}\\r\\n        </button>\\r\\n        <button mat-raised-button color=\\\"accent\\\" (click)=\\\"onRecommend(false)\\\">\\r\\n          비추천 {{content?.unrecommend}}\\r\\n        </button>\\r\\n        <button mat-raised-button\\r\\n          *ngIf=\\\"content?.boardRequest == 1\\\" (click)=\\\"acceptBoard()\\\">\\r\\n          게시판 생성 요청 수락\\r\\n        </button>\\r\\n      </div>\\r\\n\\r\\n      <br/><hr/>\\r\\n\\r\\n      <!-- ############### table for comments ############### -->\\r\\n      <table style=\\\"width: 96%; margin: auto;\\\">\\r\\n        <tbody *ngFor=\\\"let comment of content?.comment\\\">\\r\\n          <tr>\\r\\n            <td style=\\\"width: 15%;\\\">\\r\\n              <img [attr.src]=\\\"'images/profile/' + comment.userid\\\" class=\\\"profileImage\\\" />\\r\\n            </td>\\r\\n            <td>\\r\\n              <span style=\\\"font-size: 80%;\\\">\\r\\n                <span class=\\\"toProfile\\\" (click)=\\\"funcService.openInfoWindow(comment?.userid)\\\">{{comment?.nickname}}</span> &nbsp;|&nbsp; \\r\\n                {{comment?.writedate}}\\r\\n                <span *ngIf=\\\"comment?.userid == user?.userid || user?.userid == 'admin'\\\"> &nbsp;|&nbsp; \\r\\n                  <span style=\\\"cursor: pointer;\\\" (click)=\\\"onRemoveComment(comment.num)\\\">삭제</span>\\r\\n                </span>\\r\\n              </span>\\r\\n              <pre class=\\\"content\\\" [innerHTML]=\\\"comment?.comment\\\"></pre><br/>\\r\\n            </td>\\r\\n          </tr>\\r\\n        </tbody>\\r\\n      </table><br/>\\r\\n      <!-- ############### table for comments ############### -->\\r\\n\\r\\n      <!-- ############### writing area ############### -->\\r\\n      <form *ngIf=\\\"authService.loggedIn()\\\" (submit)=\\\"onWriteComment()\\\"><hr *ngIf=\\\"content?.comment?.length > 0\\\" />\\r\\n        <table style=\\\"width: 96%; margin: auto;\\\">\\r\\n          <tr style=\\\"text-align: center;\\\">\\r\\n\\r\\n            <td rowspan=\\\"2\\\" style=\\\"width: 85%;\\\">\\r\\n              <mat-form-field appearance=\\\"outline\\\" style=\\\"width: 100%; height: 100%;\\\">\\r\\n                <mat-label>댓글을 작성해주세요.</mat-label>\\r\\n                <textarea matInput placeholder=\\\"\\\" rows=\\\"3\\\" name=\\\"cmtWrite\\\"\\r\\n                [formControl]=\\\"cmtWrite\\\" [matAutocomplete]=\\\"auto\\\"></textarea>\\r\\n                <mat-autocomplete #auto>\\r\\n                  <!-- <mat-option *ngFor=\\\"let ct of filteredOptions | async\\\" [value]=\\\"'TO::' + ct?.nickname\\\" (onclick)=\\\"setCmtTo(ct)\\\">\\r\\n                    {{ct.nickname}} [{{ct.userid}}]\\r\\n                  </mat-option> -->\\r\\n                </mat-autocomplete>\\r\\n              </mat-form-field>\\r\\n            </td>\\r\\n\\r\\n            <td style=\\\"text-align: center; padding-bottom: 3%;\\\">\\r\\n              <button mat-raised-button type=\\\"submit\\\" style=\\\"width: 60%;\\\">작성</button>\\r\\n            </td>\\r\\n\\r\\n          </tr>\\r\\n        </table>\\r\\n      </form>\\r\\n      <!-- ############### writing area ############### -->\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n  <button mat-icon-button [matMenuTriggerFor]=\\\"aboutPost\\\">\\r\\n    <mat-icon>more_vert</mat-icon>\\r\\n  </button>\\r\\n  <mat-menu #aboutPost>\\r\\n    <button mat-menu-item *ngIf=\\\"content?.userid == user?.userid || user?.userid == 'admin'\\\" (click)=\\\"onRemovePost()\\\">\\r\\n      <span>삭제</span>\\r\\n    </button>\\r\\n  </mat-menu>\\r\\n</section>\\r\\n\\r\\n<!-- section for a board -->\\r\\n<section class=\\\"section--center mdl-grid mdl-grid--no-spacing mdl-shadow--2dp\\\">\\r\\n  <div class=\\\"mdl-card mdl-cell mdl-cell--12-col\\\">\\r\\n    <div class=\\\"mdl-card__supporting-text\\\">\\r\\n      <h4>게임게시판</h4>\\r\\n      <hr/>\\r\\n      \\r\\n      <!-- for large display -->\\r\\n      <table class=\\\"mdl-data-table mdl-js-data-table mdl-layout--large-screen-only\\\" style=\\\"margin: auto; width: 98%;\\\">\\r\\n        <thead>\\r\\n          <tr>\\r\\n            <th class=\\\"mdl-data-table__cell--non-numeric\\\">날짜</th>\\r\\n            <th class=\\\"mdl-data-table__cell--non-numeric\\\">제목</th>\\r\\n            <th>글쓴이</th>\\r\\n            <th>조회수</th>\\r\\n            <th>추천</th>\\r\\n          </tr>\\r\\n        </thead>\\r\\n        <tbody *ngFor=\\\"let val of contents | slice:pagingFrom:pagingTo; let i=index\\\">\\r\\n          <tr>\\r\\n            <td class=\\\"mdl-data-table__cell--non-numeric\\\">{{extractDate(val.writedate)}}</td>\\r\\n            <td class=\\\"mdl-data-table__cell--non-numeric\\\">\\r\\n              <a [routerLink]=\\\"['/game/'+val?._id]\\\"\\r\\n                style=\\\"color: black; text-decoration: none; font-weight: 400;\\\"\\r\\n                (click)=\\\"scrollToPost(postLocation)\\\">{{val.title}}</a>&nbsp;\\r\\n              <span *ngIf=\\\"val.comment.length > 0\\\" style=\\\"font-size: 85%; color: grey;\\\">[{{val.comment.length}}]</span>\\r\\n            </td>\\r\\n            <td>\\r\\n              <span class=\\\"toProfile\\\" (click)=\\\"funcService.openInfoWindow(val?.userid)\\\">{{val.nickname}}</span>\\r\\n            </td>\\r\\n            <td>{{val.hit}}</td>\\r\\n            <td>{{val.recommend}} {{val.unrecommend}}</td>\\r\\n          </tr>\\r\\n        </tbody>\\r\\n      </table>\\r\\n\\r\\n      <!-- for small display -->\\r\\n      <table class=\\\"mdl-data-table mdl-js-data-table mdl-layout--small-screen-only\\\" style=\\\"margin: auto; width: 98%;\\\">\\r\\n        <tbody *ngFor=\\\"let val of contents | slice:pagingFrom:pagingTo; let i=index\\\">\\r\\n          <tr>\\r\\n            <td class=\\\"mdl-data-table__cell--non-numeric\\\"\\r\\n              [routerLink]=\\\"['/board/'+val?._id]\\\" (click)=\\\"scrollToPost(postLocation)\\\">\\r\\n              <div>\\r\\n                {{val.title}}\\r\\n                <span *ngIf=\\\"val.comment.length > 0\\\" style=\\\"color: grey;\\\">[{{val.comment.length}}]</span>\\r\\n              </div>\\r\\n              <div style=\\\"font-size: 85%; margin-top: 1%;\\\">\\r\\n                <span>{{val.nickname}}</span>&nbsp;&nbsp;&nbsp;\\r\\n                <span>조회 {{val.hit}}</span>&nbsp;&nbsp;&nbsp;\\r\\n                <span>추천 {{val.recommend}} {{val.unrecommend}}</span>\\r\\n              </div>\\r\\n            </td>\\r\\n            <td>{{extractDate(val.writedate)}}</td>\\r\\n          </tr>\\r\\n        </tbody>\\r\\n      </table><br/>\\r\\n\\r\\n      <mat-paginator [length]=\\\"contents?.length\\\" [pageSize]=\\\"pagingSize\\\" (page)=\\\"paging($event)\\\">\\r\\n      </mat-paginator>\\r\\n\\r\\n      <div *ngIf=\\\"authService.loggedIn()\\\" style=\\\"float: right;\\\">\\r\\n        <a mat-raised-button [routerLink]=\\\"['/tool']\\\">작성</a>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <button mat-icon-button [matMenuTriggerFor]=\\\"board\\\">\\r\\n    <mat-icon>more_vert</mat-icon>\\r\\n  </button>\\r\\n  <mat-menu #board>\\r\\n    <button mat-menu-item *ngIf=\\\"authService.loggedIn()\\\">\\r\\n      <span>즐겨찾는 게시판 설정</span>\\r\\n    </button>\\r\\n  </mat-menu>\\r\\n</section>\\r\\n\\r\\n<section></section>\\r\\n\"","import { Component, OnInit, OnDestroy, Pipe, PipeTransform } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { map } from 'rxjs/operators';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\n\r\nimport { FuncService } from '../../services/func.service';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { GameService } from '../../services/game.service';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { NgFlashMessageService } from 'ng-flash-messages';\r\nimport { Observable } from 'rxjs';\r\nimport { FormControl } from '@angular/forms';\r\nimport { PageEvent } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'app-game',\r\n  templateUrl: './game.component.html',\r\n  styleUrls: ['./game.component.css']\r\n})\r\n@Pipe({ name: 'safeHtml' })\r\nexport class GameComponent implements OnInit, OnDestroy, PipeTransform {\r\n  navigationSubscription;\r\n\r\n  num: String;\r\n  content: any;\r\n  contents: Object[];\r\n  cmtWrite = new FormControl();\r\n  user: any;\r\n\r\n  data: any = {\r\n    // game data will be placed here\r\n  };\r\n  paramMap = new Map<string, any>(); // <'parameter_name', {'value: number', 'visible: boolean'}>\r\n  stageNum = 0;\r\n  text: any = undefined;\r\n  phaseNum = 0;\r\n  \r\n  pagingSize = 25;\r\n  pagingFrom: Number = 0;\r\n  pagingTo: Number = this.pagingSize;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private funcService: FuncService,\r\n    private authService: AuthService,\r\n    private gameService: GameService,\r\n    private router: Router,\r\n    private sanitized: DomSanitizer,\r\n    private flashMessage: NgFlashMessageService\r\n  ) {\r\n    this.navigationSubscription = this.router.events.subscribe((e: any) => {\r\n      if ( e instanceof NavigationEnd ) {\r\n        this.initialiseInvites();\r\n      }\r\n    });\r\n  }\r\n\r\n  transform(value) {\r\n    return this.sanitized.bypassSecurityTrustResourceUrl(value);\r\n  }\r\n\r\n  extractDate(date) {\r\n    let writeDate = new Date(date);\r\n    let today = new Date();\r\n\r\n    let writeDateDay = writeDate.getDate();\r\n    let todayDate = today.getDate();\r\n\r\n    if ( writeDateDay != todayDate ) {\r\n      return (writeDate.getMonth() + 1) + '/' + writeDateDay;\r\n    } else {\r\n      if ( writeDate.getFullYear() == today.getFullYear() && writeDate.getMonth() == today.getMonth() ) {\r\n        let hour = writeDate.getHours();\r\n        let min = writeDate.getMinutes();\r\n        return (hour >= 10 ? hour : '0' + hour) + ':' + (min >= 10 ? min : '0' + min);\r\n      } else {\r\n        return (writeDate.getMonth() + 1) + '/' + writeDateDay;\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  scrollToPost(el: HTMLElement) {\r\n    el.scrollIntoView();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.num = this.route.snapshot.paramMap.get('num');\r\n\r\n    this.gameService.takeAllPosts().subscribe(data => {\r\n      this.contents = data.posts;\r\n      if ( this.num != 'list' ) {\r\n        this.gameService.takeOnePost(this.num).subscribe(result => {\r\n          if ( result.fail ) {\r\n            this.router.navigate(['/no-page']);\r\n            return false;\r\n          }\r\n          this.content = result.post;\r\n          this.funcService.setTitle(this.content.title + ' :: 게임게시판');\r\n          if ( this.authService.loggedIn() ) {\r\n            this.authService.getProfile().subscribe(profile => {\r\n              this.user = profile.user;\r\n            });\r\n          }\r\n        });\r\n      } else this.funcService.setTitle('게임 게시판');\r\n    });\r\n\r\n  }\r\n\r\n  initialiseInvites() {\r\n    // this.ngOnInit();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if ( this.navigationSubscription ) {\r\n      this.navigationSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  gameSet() {\r\n    for (let obj of this.data.param) {  // [{param1: {value: 0, visible: true}}, {param2: {value: 100, visible: false}}, ...]\r\n      this.paramMap.set(obj.param_name, {value: obj.default, visible: obj.visible});\r\n    }\r\n    for (let stage of this.data.stage) {\r\n      if ( stage.stage_num == 0 ) {\r\n        this.text = stage.texts[0];\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  checkNextStageCondition(condition): boolean {\r\n    for (let c of condition) {\r\n      let value: number = this.paramMap.get(c.param).value;\r\n      if ( !(c.above <= value && value <= c.below) ) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  select(condition: any) {\r\n    this.stageNum++;\r\n    for (let val of condition) {\r\n      let pv: any = this.paramMap.get(val.param);\r\n      this.paramMap.delete(val.param);\r\n      pv.value += condition.add;\r\n      this.paramMap.set(val.param, pv);\r\n    }\r\n\r\n    if ( this.stageNum > this.data.stage.length ) {\r\n      // this is the end of the game\r\n      return true;\r\n    }\r\n\r\n    for (let stage of this.data.stage) {\r\n      if ( stage.stage_num == this.stageNum ) {\r\n        for (let text of stage.texts) {\r\n          let b: boolean = false;\r\n          for (let c of text.condition) {\r\n            if ( (b = this.checkNextStageCondition(c)) ) {\r\n              this.text = text;\r\n              // refresh page without using 'ngOnInit'\r\n              return true;\r\n            }\r\n          }\r\n          if ( !b ) {\r\n            // in this part, there is no condition to be fit to param\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  onRemovePost() {\r\n    if ( confirm('삭제하시겠습니까?') ) {\r\n      this.gameService.removePost(this.num).subscribe(result => {\r\n        if ( result.success ) {\r\n          this.router.navigate(['/game/list']);\r\n        } else {\r\n          this.flashMessage.showFlashMessage({\r\n            messages: ['삭제 오류'], \r\n            type: 'danger', \r\n            timeout: 3000\r\n          });\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  onRecommend(isRecommend: Boolean) {\r\n    if ( !this.authService.loggedIn() ) {\r\n      this.flashMessage.showFlashMessage({\r\n        messages: ['로그인 후 이용하실 수 있습니다.'], \r\n        type: 'danger', \r\n        timeout: 3000\r\n      });\r\n    } else {\r\n      this.gameService.recommend(this.num, isRecommend).subscribe(result => {\r\n        if ( result.success ) {\r\n          this.router.navigate(['/game/' + this.num]);\r\n        } else {\r\n          this.flashMessage.showFlashMessage({\r\n            messages: [result.msg], \r\n            type: 'danger', \r\n            timeout: 3000\r\n          });\r\n        }\r\n      })\r\n    }\r\n    \r\n  }\r\n\r\n  paging(pageEvent: PageEvent) {\r\n    this.pagingFrom = pageEvent.pageIndex * this.pagingSize;\r\n    this.pagingTo = (pageEvent.pageIndex + 1) * this.pagingSize;\r\n    this.router.navigate(['/game/' + this.num]);\r\n  }\r\n\r\n}\r\n","module.exports = \"/* .demo-card-wide .mdl-card {\\r\\n    width: 512px;\\r\\n} */\\r\\n.demo-card-wide > .mdl-card__title {\\r\\n    color: #fff;\\r\\n    height: 176px;\\r\\n    background: url('welcome_card.jpg') center / cover;\\r\\n}\\r\\n.demo-card-wide > .mdl-card__menu {\\r\\n    color: #fff;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9ob21lL2hvbWUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUNIO0lBQ0ksV0FBVztJQUNYLGFBQWE7SUFDYixrREFBb0Q7QUFDeEQ7QUFDQTtJQUNJLFdBQVc7QUFDZiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvaG9tZS9ob21lLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAuZGVtby1jYXJkLXdpZGUgLm1kbC1jYXJkIHtcclxuICAgIHdpZHRoOiA1MTJweDtcclxufSAqL1xyXG4uZGVtby1jYXJkLXdpZGUgPiAubWRsLWNhcmRfX3RpdGxlIHtcclxuICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgaGVpZ2h0OiAxNzZweDtcclxuICAgIGJhY2tncm91bmQ6IHVybCgnLi93ZWxjb21lX2NhcmQuanBnJykgY2VudGVyIC8gY292ZXI7XHJcbn1cclxuLmRlbW8tY2FyZC13aWRlID4gLm1kbC1jYXJkX19tZW51IHtcclxuICAgIGNvbG9yOiAjZmZmO1xyXG59XHJcbiJdfQ== */\"","module.exports = \"<section *ngIf=\\\"user?.userid == 'admin'\\\" class=\\\"section--center mdl-grid mdl-grid--no-spacing mdl-shadow--2dp\\\">\\r\\n  <div class=\\\"mdl-card mdl-cell mdl-cell--12-col\\\">\\r\\n    <div class=\\\"demo-card-wide mdl-card\\\" style=\\\"width: 100%;\\\">\\r\\n      <div class=\\\"mdl-card__title\\\">\\r\\n        <h2 class=\\\"mdl-card__title-text\\\">Welcome, Admin</h2>\\r\\n      </div>\\r\\n      <div class=\\\"mdl-card__supporting-text\\\">\\r\\n        반갑습니다, 어드민님\\r\\n      </div>\\r\\n      <div class=\\\"mdl-card__actions mdl-card--border\\\">\\r\\n        <!-- <a mat-button color=\\\"primary\\\" [routerLink]=\\\"['/admin']\\\"> -->\\r\\n        <a class=\\\"mdl-button mdl-button--colored mdl-js-button mdl-js-ripple-effect\\\" [routerLink]=\\\"['/admin']\\\">\\r\\n          어드민 페이지\\r\\n        </a>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</section>\\r\\n\\r\\n<section class=\\\"section--center mdl-grid mdl-grid--no-spacing mdl-shadow--2dp\\\">\\r\\n  <div class=\\\"mdl-card mdl-cell mdl-cell--12-col\\\">\\r\\n    <div class=\\\"mdl-card__supporting-text\\\">\\r\\n      <h4>사이트 개요</h4><hr/>\\r\\n      간략한 설명 <br/>\\r\\n      이 사이트는 이러이러한 것을 하는 것이다 라던가 <br/>\\r\\n      아님 뭐 이미지를 넣던가 그런거 <br/>\\r\\n      <a [routerLink]=\\\"['/test']\\\">testing</a><br/>\\r\\n      <div>{{testSentence}}</div>\\r\\n    </div>\\r\\n  </div>\\r\\n</section>\\r\\n\\r\\n<section class=\\\"section--center mdl-grid mdl-grid--no-spacing mdl-shadow--2dp\\\">\\r\\n  <div class=\\\"mdl-card mdl-cell mdl-cell--12-col\\\">\\r\\n    <div class=\\\"mdl-card__supporting-text\\\">\\r\\n      <h4>자유게시판</h4><hr/>\\r\\n      <ul>\\r\\n        <li>게시글1</li>\\r\\n        <li>게시글2</li>\\r\\n        <li>게시글3</li>\\r\\n        <li>게시글4</li>\\r\\n        <li>게시글5</li>\\r\\n      </ul>\\r\\n    </div>\\r\\n  </div>\\r\\n  <button mat-icon-button [matMenuTriggerFor]=\\\"freeBoard\\\">\\r\\n    <mat-icon>more_vert</mat-icon>\\r\\n  </button>\\r\\n  <mat-menu #freeBoard>\\r\\n    <button mat-menu-item>\\r\\n      <span>Redial</span>\\r\\n    </button>\\r\\n    <button mat-menu-item disabled>\\r\\n      <span>Check voicemail</span>\\r\\n    </button>\\r\\n    <button mat-menu-item>\\r\\n      <span>Disable alerts</span>\\r\\n    </button>\\r\\n  </mat-menu>\\r\\n</section>\\r\\n\\r\\n<section class=\\\"section--center mdl-grid mdl-grid--no-spacing mdl-shadow--2dp\\\">\\r\\n  <div class=\\\"mdl-card mdl-cell mdl-cell--12-col\\\">\\r\\n    <div class=\\\"mdl-card__supporting-text\\\">\\r\\n      <h4>다른게시판</h4><hr/>\\r\\n      <ul>\\r\\n        <li>게시글1</li>\\r\\n        <li>게시글2</li>\\r\\n        <li>게시글3</li>\\r\\n        <li>게시글4</li>\\r\\n        <li>게시글5</li>\\r\\n      </ul>\\r\\n    </div>\\r\\n  </div>\\r\\n  <button class=\\\"mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--icon\\\" id=\\\"btn2\\\">\\r\\n    <i class=\\\"material-icons\\\">more_vert</i>\\r\\n  </button>\\r\\n  <ul class=\\\"mdl-menu mdl-js-menu mdl-menu--bottom-right\\\" for=\\\"btn2\\\">\\r\\n    <li class=\\\"mdl-menu__item\\\" disabled>자주 가는 게시판으로 설정</li>\\r\\n  </ul>\\r\\n</section>\\r\\n\\r\\n<section class=\\\"section--center mdl-grid mdl-grid--no-spacing mdl-shadow--2dp\\\">\\r\\n  <div class=\\\"mdl-card mdl-cell mdl-cell--12-col\\\">\\r\\n    <div class=\\\"mdl-card__supporting-text\\\">\\r\\n      <h4>글쓰기 폼 테스트</h4><hr/>\\r\\n      <div [froalaEditor]></div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <button class=\\\"mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--icon\\\" id=\\\"btn2\\\">\\r\\n    <i class=\\\"material-icons\\\">more_vert</i>\\r\\n  </button>\\r\\n  <ul class=\\\"mdl-menu mdl-js-menu mdl-menu--bottom-right\\\" for=\\\"btn2\\\">\\r\\n    <li class=\\\"mdl-menu__item\\\" disabled>자주 가는 게시판으로 설정</li>\\r\\n  </ul>\\r\\n</section>\\r\\n\\r\\n<section></section>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FuncService } from '../../services/func.service';\r\nimport { AuthService } from '../../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  user: any = undefined;\r\n\r\n  testSentence = '<i>Hello</i>';\r\n\r\n  constructor(\r\n    private funcService: FuncService,\r\n    private authService: AuthService\r\n  ) {\r\n    this.funcService.setTitle('HOME');\r\n  }\r\n\r\n  ngOnInit() {\r\n    if ( this.authService.loggedIn() ) {\r\n      this.authService.getProfile().subscribe(profile => {\r\n        this.user = profile.user;\r\n      })\r\n    }\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<section class=\\\"section--center mdl-grid mdl-grid--no-spacing mdl-shadow--2dp\\\">\\r\\n  <div class=\\\"mdl-card mdl-cell mdl-cell--12-col\\\">\\r\\n    <div class=\\\"mdl-card__supporting-text\\\">\\r\\n      <h4>로그인</h4><hr/>\\r\\n      \\r\\n      <br/><br/>\\r\\n\\r\\n      <!-- login form for large display -->\\r\\n      <form class=\\\"mdl-layout--large-screen-only\\\" (submit)=\\\"onLoginSubmit()\\\">\\r\\n        <div style=\\\"width: 100%; text-align: center;\\\">\\r\\n          <mat-form-field class=\\\"largeInputEle\\\">\\r\\n            <input matInput placeholder=\\\"아이디\\\" type=\\\"text\\\" name=\\\"userid\\\" [(ngModel)]=\\\"userid\\\">\\r\\n          </mat-form-field>\\r\\n          <br/><br/><br/>\\r\\n          <mat-form-field class=\\\"largeInputEle\\\">\\r\\n            <input matInput placeholder=\\\"비밀번호\\\" type=\\\"password\\\" name=\\\"pw\\\" [(ngModel)]=\\\"pw\\\">\\r\\n          </mat-form-field>\\r\\n          <br/><br/><br/><br/>\\r\\n          <button mat-raised-button type=\\\"submit\\\" class=\\\"largeInputEle\\\" color=\\\"primary\\\">로그인</button>\\r\\n          <br/><br/><br/><br/><br/><hr/>\\r\\n          <a [routerLink]=\\\"['../register']\\\" style=\\\"color: black; text-decoration: none;\\\">회원가입</a>\\r\\n          &nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;\\r\\n          <a href=\\\"#\\\" style=\\\"color: black; text-decoration: none;\\\">아이디/비밀번호 찾기</a>\\r\\n        </div>\\r\\n      </form>\\r\\n\\r\\n      <!-- login form for small display -->\\r\\n      <form class=\\\"mdl-layout--small-screen-only\\\" (submit)=\\\"onLoginSubmit()\\\">\\r\\n        <div style=\\\"width: 100%; text-align: center;\\\">\\r\\n          <mat-form-field class=\\\"smallInputEle\\\">\\r\\n            <input matInput placeholder=\\\"아이디\\\" type=\\\"text\\\" name=\\\"userid\\\" [(ngModel)]=\\\"userid\\\">\\r\\n          </mat-form-field>\\r\\n          <br/><br/>\\r\\n          <mat-form-field class=\\\"smallInputEle\\\">\\r\\n            <input matInput placeholder=\\\"비밀번호\\\" type=\\\"password\\\" name=\\\"pw\\\" [(ngModel)]=\\\"pw\\\">\\r\\n          </mat-form-field>\\r\\n          <br/><br/><br/>\\r\\n          <button mat-raised-button type=\\\"submit\\\" class=\\\"smallInputEle\\\" color=\\\"primary\\\">로그인</button>\\r\\n          <br/><br/><br/><br/><br/><hr/>\\r\\n          <a [routerLink]=\\\"['../register']\\\" style=\\\"color: black; text-decoration: none;\\\">회원가입</a>\\r\\n          &nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;\\r\\n          <a href=\\\"#\\\" style=\\\"color: black; text-decoration: none;\\\">아이디/비밀번호 찾기</a>\\r\\n        </div>\\r\\n      </form>\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n</section>\\r\\n\\r\\n<section></section>\\r\\n<br/><br/>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { NgFlashMessageService } from 'ng-flash-messages';\r\nimport { Router } from '@angular/router';\r\nimport { FuncService } from '../../services/func.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  userid: String;\r\n  pw: String;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private flashMessage: NgFlashMessageService,\r\n    private funcService: FuncService\r\n    ) {\r\n      this.funcService.setTitle('로그인');\r\n    }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onLoginSubmit() {\r\n    // console.log(this.username);\r\n    const user = {\r\n      userid: this.userid,\r\n      pw: this.pw\r\n    }\r\n\r\n    if ( this.userid == '' || this.pw == '' || this.userid == undefined || this.pw == undefined ) {\r\n      this.flashMessage.showFlashMessage({\r\n        messages: ['필드가 비어있습니다.'], \r\n        type: 'danger',\r\n        timeout: 3000\r\n      });\r\n      return false;\r\n    } else {\r\n\r\n      this.authService.authenticateUser(user).subscribe(data => {\r\n        if( data.success ) {\r\n          this.authService.storeUserData(data.token, data.user);\r\n          this.router.navigate([this.funcService.getPreviousUrl()]);\r\n        } else {\r\n          this.flashMessage.showFlashMessage({\r\n            messages: [data.msg], \r\n            type: 'danger', \r\n            timeout: 3000\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbW9kaWZ5L21vZGlmeS5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<section class=\\\"section--center mdl-grid mdl-grid--no-spacing mdl-shadow--2dp\\\">\\r\\n  <div class=\\\"mdl-card mdl-cell mdl-cell--12-col\\\">\\r\\n    <div class=\\\"mdl-card__supporting-text\\\">\\r\\n      <h4>회원정보수정</h4><hr/><br/><br/>\\r\\n\\r\\n      <!-- registration form for large display -->\\r\\n      <form class=\\\"mdl-layout--large-screen-only\\\" (submit)=\\\"onModifyUser()\\\">\\r\\n        <div style=\\\"width: 100%; text-align: center;\\\">\\r\\n          <mat-form-field class=\\\"largeInputEle\\\">\\r\\n            <input matInput placeholder=\\\"아이디\\\" type=\\\"text\\\" [value]=\\\"user?.userid\\\" disabled>\\r\\n          </mat-form-field>\\r\\n          <br/><br/>\\r\\n          <mat-form-field class=\\\"largeInputEle\\\">\\r\\n            <input matInput placeholder=\\\"기존 비밀번호 (필수)\\\" type=\\\"password\\\" name=\\\"pw\\\" [(ngModel)]=\\\"pw\\\">\\r\\n          </mat-form-field>\\r\\n          <br/><br/>\\r\\n          <mat-form-field class=\\\"largeInputEle\\\">\\r\\n            <input matInput placeholder=\\\"새 비밀번호\\\" type=\\\"password\\\" name=\\\"newpw\\\" [(ngModel)]=\\\"newpw\\\">\\r\\n            <mat-hint><strong>비밀번호 미변경 시 공백 유지</strong></mat-hint>\\r\\n          </mat-form-field>\\r\\n          <br/><br/>\\r\\n          <mat-form-field class=\\\"largeInputEle\\\">\\r\\n            <input matInput placeholder=\\\"닉네임\\\" type=\\\"text\\\" name=\\\"nickname\\\" [(ngModel)]=\\\"nickname\\\">\\r\\n          </mat-form-field>\\r\\n          <br/><br/>\\r\\n          <mat-form-field class=\\\"largeInputEle\\\">\\r\\n            <input matInput placeholder=\\\"이메일\\\" type=\\\"text\\\" [value]=\\\"user?.email\\\" disabled>\\r\\n          </mat-form-field>\\r\\n          <br/><br/>\\r\\n          <mat-form-field class=\\\"largeInputEle\\\">\\r\\n            <input matInput placeholder=\\\"한 줄 소개\\\" type=\\\"text\\\" name=\\\"introduction\\\" [(ngModel)]=\\\"introduction\\\">\\r\\n          </mat-form-field>\\r\\n          <br/><br/>\\r\\n          <br/>\\r\\n          <button mat-raised-button type=\\\"submit\\\" class=\\\"largeInputEle\\\" color=\\\"primary\\\">회원가입</button>\\r\\n          <br/><br/><br/><hr/>\\r\\n          회원코드 : [ {{user?._id}} ]\\r\\n        </div>\\r\\n      </form>\\r\\n\\r\\n      <!-- registration form for small display -->\\r\\n      <form class=\\\"mdl-layout--small-screen-only\\\" (submit)=\\\"onModifyUser()\\\">\\r\\n        <div style=\\\"width: 100%; text-align: center;\\\">\\r\\n          <mat-form-field class=\\\"smallInputEle\\\">\\r\\n            <input matInput placeholder=\\\"아이디\\\" type=\\\"text\\\" [value]=\\\"user?.userid\\\" disabled>\\r\\n          </mat-form-field>\\r\\n          <br/><br/>\\r\\n          <mat-form-field class=\\\"smallInputEle\\\">\\r\\n            <input matInput placeholder=\\\"기존 비밀번호\\\" type=\\\"password\\\" name=\\\"pw\\\" [(ngModel)]=\\\"pw\\\">\\r\\n          </mat-form-field>\\r\\n          <br/><br/>\\r\\n          <mat-form-field class=\\\"smallInputEle\\\">\\r\\n            <input matInput placeholder=\\\"새 비밀번호\\\" type=\\\"password\\\" name=\\\"newpw\\\" [(ngModel)]=\\\"newpw\\\">\\r\\n            <mat-hint><strong>비밀번호 미변경 시 공백 유지</strong></mat-hint>\\r\\n          </mat-form-field>\\r\\n          <br/><br/>\\r\\n          <mat-form-field class=\\\"smallInputEle\\\">\\r\\n            <input matInput placeholder=\\\"닉네임\\\" type=\\\"text\\\" name=\\\"nickname\\\" [(ngModel)]=\\\"nickname\\\">\\r\\n          </mat-form-field>\\r\\n          <br/><br/>\\r\\n          <mat-form-field class=\\\"smallInputEle\\\">\\r\\n            <input matInput placeholder=\\\"이메일\\\" type=\\\"text\\\" name=\\\"email\\\" [value]=\\\"user?.email\\\" disabled>\\r\\n          </mat-form-field>\\r\\n          <br/><br/>\\r\\n          <mat-form-field class=\\\"smallInputEle\\\">\\r\\n            <input matInput placeholder=\\\"한 줄 소개\\\" type=\\\"text\\\" name=\\\"introduction\\\" [(ngModel)]=\\\"introduction\\\">\\r\\n          </mat-form-field>\\r\\n          <br/><br/>\\r\\n          <br/>\\r\\n          <button mat-raised-button type=\\\"submit\\\" class=\\\"smallInputEle\\\" color=\\\"primary\\\">회원가입</button>\\r\\n          <br/><br/><br/><hr/>\\r\\n          회원코드 : [ {{user?._id}} ]\\r\\n        </div>\\r\\n      </form>\\r\\n      <button mat-raised-button (click)=\\\"addProfileImage(user?.userid)\\\" style=\\\"float: right;\\\">프로필 이미지 변경</button>\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n</section>\\r\\n\\r\\n<section></section>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { FuncService } from '../../services/func.service';\r\nimport { ValidateService } from '../../services/validate.service';\r\nimport { NgFlashMessageService } from 'ng-flash-messages';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-modify',\r\n  templateUrl: './modify.component.html',\r\n  styleUrls: ['./modify.component.css']\r\n})\r\nexport class ModifyComponent implements OnInit {\r\n  user: any;\r\n\r\n  pw: string;\r\n  newpw: string;\r\n  nickname: string;\r\n  introduction: string;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private funcService: FuncService,\r\n    private validateService: ValidateService,\r\n    private flashMessage: NgFlashMessageService,\r\n    private router: Router\r\n  ) {\r\n    this.funcService.setTitle('회원정보수정');\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.authService.getProfile().subscribe(profile => {\r\n      this.user = profile.user;\r\n      this.nickname = this.user.nickname;\r\n      this.introduction = this.user.introduction;\r\n    });\r\n  }\r\n\r\n  onModifyUser() {\r\n    if ( !this.validateService.validateModify({pw: this.pw, nickname: this.nickname, introduction: this.introduction}) ) {\r\n      this.flashMessage.showFlashMessage({\r\n        messages: ['필드가 비어있습니다.'], \r\n        type: 'danger',\r\n        timeout: 3000\r\n      });\r\n      return false;\r\n    }\r\n\r\n    let conditions: any = this.validateService\r\n      .validateConditions({userid: this.user.userid, pw: (this.newpw == undefined || this.newpw == '' ? this.pw : this.newpw), nickname: this.nickname});\r\n    if ( !conditions.valid ) {\r\n      this.flashMessage.showFlashMessage({messages: [conditions.msg], type: 'danger', timeout: 3000});\r\n      return false;\r\n    }\r\n\r\n    this.authService.authenticateUser({userid: this.user.userid, pw: this.pw}).subscribe(data => {\r\n      if ( !data.success ) {\r\n        this.flashMessage.showFlashMessage({\r\n          messages: ['비밀번호가 잘못되었습니다.'], \r\n          type: 'danger',\r\n          timeout: 3000\r\n        });\r\n        return false;\r\n      } else {\r\n        const formData = {\r\n          nickname: this.nickname,\r\n          pw: (this.newpw == undefined || this.newpw == '' ? '' : this.newpw),\r\n          introduction: this.introduction\r\n        };\r\n        this.authService.modifyUser(formData).subscribe(result => {\r\n          if ( result.success ) {\r\n            this.flashMessage.showFlashMessage({\r\n              messages: ['회원정보가 변경되었습니다.'], \r\n              type: 'success',\r\n              timeout: 2000\r\n            });\r\n            this.router.navigate(['/']);\r\n          } else {\r\n            this.flashMessage.showFlashMessage({\r\n              messages: [result.msg], \r\n              type: 'danger',\r\n              timeout: 3000\r\n            });\r\n          }\r\n        })\r\n      }\r\n    })\r\n    \r\n  }\r\n\r\n  addProfileImage(userid) {\r\n    this.funcService.openWindowWithAuth(this.funcService.ServerAddress + '/modals/profileImage?userid=' + userid, userid);\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbm8tcGFnZS9uby1wYWdlLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<section *ngIf=\\\"num != 'list'\\\" class=\\\"section--center mdl-grid mdl-grid--no-spacing mdl-shadow--2dp\\\">\\r\\n  <div class=\\\"mdl-card mdl-cell mdl-cell--12-col\\\">\\r\\n    <div class=\\\"mdl-card__supporting-text\\\">\\r\\n      <h4 style=\\\"display: inline;\\\">404 ERROR</h4>\\r\\n\\r\\n      <hr/>\\r\\n      <div class=\\\"posting\\\">\\r\\n        <img src=\\\"images/404.jpg\\\" style=\\\"width: 100%;\\\"><br/><br/>\\r\\n        페이지가 존재하지 않습니다.<br/><br/>\\r\\n        <a mat-raised-button color=\\\"primary\\\" [routerLink]=\\\"[this.funcService.getPreviousUrl()]\\\">이전 페이지로 돌아가기</a><br/><br/>\\r\\n      </div>\\r\\n      <br/><br/>\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n</section>\\r\\n\\r\\n<section></section>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FuncService } from '../../services/func.service';\r\n\r\n@Component({\r\n  selector: 'app-no-page',\r\n  templateUrl: './no-page.component.html',\r\n  styleUrls: ['./no-page.component.css']\r\n})\r\nexport class NoPageComponent implements OnInit {\r\n  constructor(\r\n    private funcService: FuncService\r\n  ) {\r\n    this.funcService.setTitle('404');\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcHJvZmlsZS9wcm9maWxlLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<section *ngIf=\\\"user\\\" class=\\\"section--center mdl-grid mdl-grid--no-spacing mdl-shadow--2dp\\\">\\r\\n  <div class=\\\"mdl-card mdl-cell mdl-cell--12-col\\\">\\r\\n    <div class=\\\"mdl-card__supporting-text\\\">\\r\\n      <h4 style=\\\"display: inline;\\\">PROFILE &nbsp;-&nbsp; <span (click)=\\\"funcService.openInfoWindow(user.userid)\\\" style=\\\"cursor: pointer;\\\">{{user.userid}}</span></h4>\\r\\n      <span style=\\\"float: right\\\"><img [attr.src]=\\\"'images/profile/' + user.userid\\\" class=\\\"profileImage\\\"></span>\\r\\n      <hr/><br/><br/>\\r\\n      \\r\\n      <table class=\\\"mdl-data-table mdl-js-data-table\\\" style=\\\"margin: auto; width: 80%;\\\">\\r\\n        <tbody>\\r\\n          <tr>\\r\\n            <td class=\\\"mdl-data-table__cell--non-numeric\\\">아이디</td>\\r\\n            <td class=\\\"mdl-data-table__cell--non-numeric\\\">{{user.userid}}</td>\\r\\n          </tr>\\r\\n          <tr>\\r\\n            <td class=\\\"mdl-data-table__cell--non-numeric\\\">닉네임</td>\\r\\n            <td class=\\\"mdl-data-table__cell--non-numeric\\\">{{user.nickname}}</td>\\r\\n          </tr>\\r\\n          <tr>\\r\\n            <td class=\\\"mdl-data-table__cell--non-numeric\\\">이메일</td>\\r\\n            <td class=\\\"mdl-data-table__cell--non-numeric\\\">{{user.email}}</td>\\r\\n          </tr>\\r\\n          <tr>\\r\\n            <td class=\\\"mdl-data-table__cell--non-numeric\\\">한 줄 소개</td>\\r\\n            <td class=\\\"mdl-data-table__cell--non-numeric\\\">{{user.introduction}}</td>\\r\\n          </tr>\\r\\n          <tr>\\r\\n            <td class=\\\"mdl-data-table__cell--non-numeric\\\">가입일</td>\\r\\n            <td class=\\\"mdl-data-table__cell--non-numeric\\\">{{user.registerdate}}</td>\\r\\n          </tr>\\r\\n        </tbody>\\r\\n      </table>\\r\\n      <br/><br/>\\r\\n\\r\\n      <a mat-raised-button [routerLink]=\\\"['/modify']\\\" style=\\\"float: right;\\\">회원정보수정</a>\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n</section>\\r\\n\\r\\n<section></section>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { Router } from '@angular/router';\r\nimport { FuncService } from 'src/app/services/func.service';\r\n\r\n@Component({\r\n  selector: 'app-profile',\r\n  templateUrl: './profile.component.html',\r\n  styleUrls: ['./profile.component.css']\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n  user: Object;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private funcService: FuncService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.authService.getProfile().subscribe(profile => {\r\n      this.user = profile.user;\r\n      this.funcService.setTitle(profile.user.nickname + ' :: PROFILE');\r\n    }, \r\n    err => {\r\n      console.log(err);\r\n      return false;\r\n    });\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<section class=\\\"section--center mdl-grid mdl-grid--no-spacing mdl-shadow--2dp\\\">\\r\\n  <div class=\\\"mdl-card mdl-cell mdl-cell--12-col\\\">\\r\\n    <div class=\\\"mdl-card__supporting-text\\\">\\r\\n      <h4>회원가입</h4><hr/><br/><br/>\\r\\n\\r\\n      <!-- registration form for large display -->\\r\\n      <form class=\\\"mdl-layout--large-screen-only\\\" (submit)=\\\"onRegisterSubmit()\\\">\\r\\n        <div style=\\\"width: 100%; text-align: center;\\\">\\r\\n          <mat-form-field class=\\\"largeInputEle\\\">\\r\\n            <input matInput placeholder=\\\"아이디\\\" type=\\\"text\\\" name=\\\"userid\\\" [(ngModel)]=\\\"userid\\\">\\r\\n          </mat-form-field>\\r\\n          <br/><br/>\\r\\n          <mat-form-field class=\\\"largeInputEle\\\">\\r\\n            <input matInput placeholder=\\\"비밀번호\\\" type=\\\"password\\\" name=\\\"pw\\\" [(ngModel)]=\\\"pw\\\">\\r\\n          </mat-form-field>\\r\\n          <br/><br/>\\r\\n          <mat-form-field class=\\\"largeInputEle\\\">\\r\\n            <input matInput placeholder=\\\"비밀번호 확인\\\" type=\\\"password\\\" name=\\\"pwchk\\\" [(ngModel)]=\\\"pwchk\\\">\\r\\n          </mat-form-field>\\r\\n          <br/><br/>\\r\\n          <mat-form-field class=\\\"largeInputEle\\\">\\r\\n            <input matInput placeholder=\\\"닉네임\\\" type=\\\"text\\\" name=\\\"nickname\\\" [(ngModel)]=\\\"nickname\\\">\\r\\n          </mat-form-field>\\r\\n          <br/><br/>\\r\\n          <mat-form-field class=\\\"largeInputEle\\\">\\r\\n            <input matInput placeholder=\\\"이메일\\\" type=\\\"text\\\" name=\\\"email\\\" [formControl]=\\\"emailFormControl\\\" [errorStateMatcher]=\\\"matcher\\\">\\r\\n            <mat-error *ngIf=\\\"emailFormControl.hasError('email')\\\">\\r\\n              이메일을 입력해주세요.\\r\\n            </mat-error>\\r\\n          </mat-form-field>\\r\\n          <br/><br/>\\r\\n          <mat-form-field class=\\\"largeInputEle\\\">\\r\\n            <input matInput placeholder=\\\"한 줄 소개\\\" type=\\\"text\\\" name=\\\"introduction\\\" [(ngModel)]=\\\"introduction\\\">\\r\\n          </mat-form-field>\\r\\n          <br/><br/>\\r\\n          <br/>\\r\\n          <button mat-raised-button type=\\\"submit\\\" class=\\\"largeInputEle\\\" color=\\\"primary\\\">회원가입</button>\\r\\n          <br/><br/><br/><hr/>\\r\\n          <!-- 여기에다가 뭔가 알려둘 사항 같은 걸 써두면 됨 -->\\r\\n        </div>\\r\\n      </form>\\r\\n\\r\\n      <!-- registration form for small display -->\\r\\n      <form class=\\\"mdl-layout--small-screen-only\\\" (submit)=\\\"onRegisterSubmit()\\\">\\r\\n        <div style=\\\"width: 100%; text-align: center;\\\">\\r\\n          <mat-form-field class=\\\"smallInputEle\\\">\\r\\n            <input matInput placeholder=\\\"아이디\\\" type=\\\"text\\\" name=\\\"userid\\\" [(ngModel)]=\\\"userid\\\">\\r\\n          </mat-form-field>\\r\\n          <br/><br/>\\r\\n          <mat-form-field class=\\\"smallInputEle\\\">\\r\\n            <input matInput placeholder=\\\"비밀번호\\\" type=\\\"password\\\" name=\\\"pw\\\" [(ngModel)]=\\\"pw\\\">\\r\\n          </mat-form-field>\\r\\n          <br/><br/>\\r\\n          <mat-form-field class=\\\"smallInputEle\\\">\\r\\n            <input matInput placeholder=\\\"비밀번호 확인\\\" type=\\\"password\\\" name=\\\"pwchk\\\" [(ngModel)]=\\\"pwchk\\\">\\r\\n          </mat-form-field>\\r\\n          <br/><br/>\\r\\n          <mat-form-field class=\\\"smallInputEle\\\">\\r\\n            <input matInput placeholder=\\\"닉네임\\\" type=\\\"text\\\" name=\\\"nickname\\\" [(ngModel)]=\\\"nickname\\\">\\r\\n          </mat-form-field>\\r\\n          <br/><br/>\\r\\n          <mat-form-field class=\\\"smallInputEle\\\">\\r\\n            <input matInput placeholder=\\\"이메일\\\" type=\\\"text\\\" name=\\\"email\\\" [formControl]=\\\"emailFormControl\\\" [errorStateMatcher]=\\\"matcher\\\">\\r\\n            <mat-error *ngIf=\\\"emailFormControl.hasError('email')\\\">\\r\\n              이메일을 입력해주세요.\\r\\n            </mat-error>\\r\\n          </mat-form-field>\\r\\n          <br/><br/>\\r\\n          <mat-form-field class=\\\"smallInputEle\\\">\\r\\n            <input matInput placeholder=\\\"한 줄 소개\\\" type=\\\"text\\\" name=\\\"introduction\\\" [(ngModel)]=\\\"introduction\\\">\\r\\n          </mat-form-field>\\r\\n          <br/><br/>\\r\\n          <br/>\\r\\n          <button mat-raised-button type=\\\"submit\\\" class=\\\"smallInputEle\\\" color=\\\"primary\\\">회원가입</button>\\r\\n          <br/><br/><br/><hr/>\\r\\n          <!-- 여기에다가 뭔가 알려둘 사항 같은 걸 써두면 됨 -->\\r\\n        </div>\\r\\n      </form>\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n</section>\\r\\n\\r\\n<section></section>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ValidateService } from '../../services/validate.service';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { NgFlashMessageService } from 'ng-flash-messages';\r\nimport { Router } from '@angular/router';\r\nimport { FormControl, Validators } from '@angular/forms';\r\nimport { FuncService } from 'src/app/services/func.service';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  userid: String;\r\n  pw: String;\r\n  pwchk: String;\r\n  nickname: String;\r\n  introduction: String;\r\n  emailFormControl = new FormControl('', [\r\n    Validators.required,\r\n    Validators.email,\r\n  ]);\r\n\r\n  constructor(\r\n    private validateService: ValidateService, \r\n    private flashMessage: NgFlashMessageService, \r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private funcService: FuncService\r\n    ) {\r\n      this.funcService.setTitle('회원가입');\r\n    }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onRegisterSubmit() {\r\n    const user = {\r\n      userid: this.userid,\r\n      pw: this.pw,\r\n      pwchk: this.pwchk,\r\n      nickname: this.nickname,\r\n      email: this.emailFormControl.value,\r\n      introduction: this.introduction\r\n    }\r\n\r\n    // Required Fields\r\n    if ( !this.validateService.validateRegister(user) ) {\r\n      this.flashMessage.showFlashMessage({messages: ['빈 항목이 있습니다'], type: 'danger', timeout: 3000});\r\n      return false;\r\n    }\r\n\r\n    // Password check\r\n    if ( this.pw != this.pwchk ) {\r\n      this.flashMessage.showFlashMessage({messages: ['비밀번호가 일치하지 않습니다'], type: 'danger', timeout: 3000});\r\n      return false;\r\n    }\r\n\r\n    // Check with conditions\r\n    let conditions: any = this.validateService.validateConditions(user);\r\n    if ( !conditions.valid ) {\r\n      this.flashMessage.showFlashMessage({messages: [conditions.msg], type: 'danger', timeout: 3000});\r\n      return false;\r\n    }\r\n\r\n    // Validate Email\r\n    if( !this.validateService.validateEmail(user.email) ) {\r\n      this.flashMessage.showFlashMessage({messages: ['이메일 형식이 맞지 않습니다'], type: 'danger', timeout: 3000});\r\n      return false;\r\n    }\r\n\r\n    // Register User\r\n    this.authService.registerUser(user).subscribe(data => {\r\n      if(data.success) {\r\n        this.flashMessage.showFlashMessage({\r\n          messages: ['회원가입 완료 - 로그인 해주십시오'], \r\n          type: 'success', \r\n          timeout: 2000\r\n        });\r\n        this.router.navigate(['/']);\r\n      } else {\r\n        this.flashMessage.showFlashMessage({\r\n          messages: [data.msg], \r\n          type: 'danger', \r\n          timeout: 3000\r\n        });\r\n        // this.router.navigate(['/register']);\r\n      }\r\n    })\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvdGVzdC90ZXN0LmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<!-- section for a post -->\\r\\n<section *ngIf=\\\"num != 'list'\\\" class=\\\"section--center mdl-grid mdl-grid--no-spacing mdl-shadow--2dp\\\">\\r\\n  <div class=\\\"mdl-card mdl-cell mdl-cell--12-col\\\">\\r\\n    <div class=\\\"mdl-card__supporting-text\\\">\\r\\n      <h4 style=\\\"display: inline;\\\">TITLE</h4>\\r\\n\\r\\n      <span style=\\\"float: right; text-align: right; font-size: 80%;\\\">\\r\\n        <span class=\\\"toProfile\\\">NICKNAME</span><br/>WRITE-DATE\\r\\n      </span>\\r\\n      <hr/>\\r\\n      <div class=\\\"posting\\\">\\r\\n        <div #stage_content>{{text.content}}</div>\\r\\n        <table>\\r\\n          <tbody *ngFor=\\\"let choice of text.choice\\\">\\r\\n            <tr>\\r\\n              <td>{{choice.choice_num}}</td>\\r\\n              <td (click)=\\\"select(choice?.set_param)\\\">{{choice.content}}</td>\\r\\n            </tr>\\r\\n          </tbody>\\r\\n        </table>\\r\\n      </div>\\r\\n      <br/><br/>\\r\\n      <div style=\\\"text-align: center;\\\">\\r\\n        <button mat-raised-button color=\\\"primary\\\">\\r\\n          추천 0\\r\\n        </button>\\r\\n      </div>\\r\\n      <br/><hr/>\\r\\n\\r\\n      <!-- ############### table for comments ############### -->\\r\\n      <table style=\\\"width: 96%; margin: auto;\\\">\\r\\n        <tbody *ngFor=\\\"let comment of content?.comment\\\">\\r\\n          <tr>\\r\\n            <td style=\\\"width: 15%;\\\">\\r\\n              <img [attr.src]=\\\"'images/profile/' + comment.userid\\\" class=\\\"profileImage\\\" />\\r\\n            </td>\\r\\n            <td>\\r\\n              <span style=\\\"font-size: 80%;\\\">\\r\\n                <span class=\\\"toProfile\\\">COMMENT-NICKNAME</span> &nbsp;|&nbsp; \\r\\n                COMMENT-WRITE-DATE\\r\\n              </span>\\r\\n              <pre>\\r\\n                COMMENT\\r\\n              </pre><br/>\\r\\n            </td>\\r\\n          </tr>\\r\\n        </tbody>\\r\\n      </table><br/>\\r\\n      <!-- ############### table for comments ############### -->\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n  <button mat-icon-button [matMenuTriggerFor]=\\\"aboutPost\\\">\\r\\n    <mat-icon>more_vert</mat-icon>\\r\\n  </button>\\r\\n  <mat-menu #aboutPost>\\r\\n    <button mat-menu-item>\\r\\n      <span>삭제</span>\\r\\n    </button>\\r\\n  </mat-menu>\\r\\n</section>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FuncService } from '../../services/func.service';\r\n\r\n@Component({\r\n  selector: 'app-test',\r\n  templateUrl: './test.component.html',\r\n  styleUrls: ['./test.component.css']\r\n})\r\nexport class TestComponent implements OnInit {\r\n\r\n  constructor(\r\n    private funcService: FuncService,\r\n  ) {\r\n    this.funcService.setTitle('TEST!!!!');\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvdG9vbC90b29sLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<iframe src=\\\"http://localhost:3000/games/tool\\\" height=\\\"700\\\" style=\\\"width: 100%\\\"></iframe>\\r\\n\\r\\n<section class=\\\"section--center mdl-grid mdl-grid--no-spacing mdl-shadow--2dp\\\">\\r\\n  <div class=\\\"mdl-card mdl-cell mdl-cell--12-col\\\">\\r\\n    <div class=\\\"mdl-card__supporting-text\\\">\\r\\n      \\r\\n      <form (submit)=\\\"onWriteGame()\\\">\\r\\n        <table style=\\\"width: 96%; margin: auto;\\\">\\r\\n          <tr style=\\\"text-align: center;\\\">\\r\\n\\r\\n            <td rowspan=\\\"2\\\" style=\\\"width: 85%;\\\">\\r\\n              <mat-form-field appearance=\\\"outline\\\" style=\\\"width: 100%; height: 100%;\\\">\\r\\n                <mat-label>주석</mat-label>\\r\\n                <textarea matInput placeholder=\\\"\\\" rows=\\\"3\\\"\\r\\n                  name=\\\"content\\\" [(ngModel)]=\\\"content\\\"></textarea>\\r\\n              </mat-form-field>\\r\\n            </td>\\r\\n\\r\\n            <td style=\\\"text-align: center; padding-bottom: 3%;\\\">\\r\\n              <button mat-raised-button type=\\\"submit\\\" style=\\\"width: 60%;\\\">작성</button>\\r\\n            </td>\\r\\n\\r\\n          </tr>\\r\\n        </table>\\r\\n      </form>\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n</section>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FuncService } from '../../services/func.service';\r\nimport { GameService } from '../../services/game.service';\r\n\r\n@Component({\r\n  selector: 'app-tool',\r\n  templateUrl: './tool.component.html',\r\n  styleUrls: ['./tool.component.css']\r\n})\r\nexport class ToolComponent implements OnInit {\r\n  options: any = {\r\n    placeholderText: '',\r\n    height: 500,\r\n    imageDefaultAlign: 'left',\r\n    imageDefaultWidth: 0,\r\n\r\n    charCounterCount: true,\r\n    imageUploadParam: 'image',\r\n    imageUploadURL: '/games/images',\r\n    imageUploadMethod: 'POST',\r\n    imageMaxSize: 5 * 1024 * 1024,  // maximun size : 5MB\r\n    imageAllowTypes: [ 'jpeg', 'jpg', 'png', 'gif', 'webp' ],\r\n  };\r\n  content: String;\r\n\r\n  constructor(\r\n    private funcService: FuncService,\r\n    private gameService: GameService\r\n  ) {\r\n    this.funcService.setTitle('게임 만들기');\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onWriteGame() {\r\n    this.gameService.writeGame(this.content).subscribe(data => {\r\n      // handle\r\n    });\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvd3JpdGUvd3JpdGUuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<section class=\\\"section--center mdl-grid mdl-grid--no-spacing mdl-shadow--2dp\\\">\\r\\n  <div class=\\\"mdl-card mdl-cell mdl-cell--12-col\\\">\\r\\n    <div class=\\\"mdl-card__supporting-text\\\">\\r\\n      <h4>글쓰기</h4><hr/>\\r\\n      <div style=\\\"width: 98%; margin: auto;\\\">\\r\\n        <form (submit)=\\\"onWritePost()\\\">\\r\\n          <mat-form-field style=\\\"width: 100%;\\\">\\r\\n            <input matInput placeholder=\\\"제목\\\" type=\\\"text\\\" name=\\\"title\\\" [(ngModel)]=\\\"title\\\">\\r\\n          </mat-form-field>\\r\\n          <textarea [froalaEditor]=\\\"options\\\" [(ngModel)]=\\\"content\\\" name=\\\"content\\\"></textarea>\\r\\n          <br/>\\r\\n          <button mat-raised-button type=\\\"submit\\\" style=\\\"float: right;\\\">작성</button>\\r\\n        </form><br/>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</section>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { FuncService } from '../../services/func.service';\r\nimport { BoardService } from '../../services/board.service';\r\nimport { NgFlashMessageService } from 'ng-flash-messages';\r\n\r\n@Component({\r\n  selector: 'app-write',\r\n  templateUrl: './write.component.html',\r\n  styleUrls: ['./write.component.css']\r\n})\r\nexport class WriteComponent implements OnInit {\r\n  options: any = {\r\n    placeholderText: '',\r\n    height: 500,\r\n    imageDefaultAlign: 'left',\r\n    imageDefaultWidth: 0,\r\n\r\n    charCounterCount: true,\r\n    imageUploadParam: 'image',\r\n    imageUploadURL: '/boards/images',\r\n    imageUploadMethod: 'POST',\r\n    imageMaxSize: 5 * 1024 * 1024,  // maximun size : 5MB\r\n    imageAllowTypes: [ 'jpeg', 'jpg', 'png', 'gif', 'webp' ],\r\n\r\n    toolbarButtonsXS: [\r\n      'insertImage', 'bold', 'italic', 'underline', 'strikeThrough', 'subscript', 'superscript'\r\n    ]\r\n  };\r\n\r\n  type: String;\r\n  title: String;\r\n  content: String;\r\n\r\n  constructor(\r\n    private funcService: FuncService,\r\n    private route: ActivatedRoute,\r\n    private flashMessage: NgFlashMessageService,\r\n    private router: Router,\r\n    private boardService: BoardService\r\n  ) {\r\n    this.type = this.route.snapshot.paramMap.get('type');\r\n    this.funcService.setTitle('글 작성');\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onWritePost() {\r\n    if ( this.title == '' || this.title == undefined ) {\r\n      this.flashMessage.showFlashMessage({\r\n        messages: ['제목이 비어있습니다.'], \r\n        type: 'danger', \r\n        timeout: 3000\r\n      });\r\n      return false;\r\n    } else if ( this.content == '' || this.content == undefined ) {\r\n      this.flashMessage.showFlashMessage({\r\n        messages: ['내용이 비어있습니다.'], \r\n        type: 'danger', \r\n        timeout: 3000\r\n      });\r\n      return false;\r\n    } else {\r\n      const formData = {\r\n        type: this.type,\r\n        title: this.title,\r\n        content: this.content\r\n      };\r\n      this.boardService.writePost(formData).subscribe(data => {\r\n        if ( data.success ) {\r\n          this.router.navigate(['/board/' + this.type + '/' + data.num]);\r\n        } else {\r\n          this.flashMessage.showFlashMessage({\r\n            messages: ['글 작성 실패'], \r\n            type: 'danger', \r\n            timeout: 3000\r\n          });\r\n        }\r\n      });\r\n\r\n    }\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router, CanActivate } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(\r\n    private authService:AuthService, \r\n    private router:Router\r\n  ) { }\r\n\r\n   canActivate() {\r\n    if ( this.authService.loggedIn() ) {\r\n      return true;\r\n    } else {\r\n      this.router.navigate(['/login']);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Http, Headers } from '@angular/http';\r\nimport { map } from 'rxjs/operators';\r\nimport { tokenNotExpired } from 'angular2-jwt';\r\nimport { FuncService } from './func.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  authToken: any;\r\n  user: any;\r\n\r\n  constructor(\r\n    private http: Http,\r\n    private funcService: FuncService\r\n  ) { }\r\n\r\n  registerUser(user) {\r\n    let headers = new Headers();\r\n    headers.append('Content-Type', 'application/json');\r\n    return this.http.post(this.funcService.ServerAddress + '/users/register', user, {headers: headers})\r\n      .pipe(map(res => res.json()));\r\n  }\r\n\r\n  authenticateUser(user) {\r\n    let headers = new Headers();\r\n    headers.append('Content-Type', 'application/json');\r\n    return this.http.post(this.funcService.ServerAddress + '/users/authenticate', user, {headers: headers})\r\n      .pipe(map(res => res.json()));\r\n  }\r\n\r\n  getProfile() {\r\n    let headers = new Headers();\r\n    this.loadToken();\r\n    headers.append('Authorization', this.authToken);\r\n    headers.append('Content-Type', 'application/json');\r\n    return this.http.get(this.funcService.ServerAddress + '/users/profile', {headers: headers})\r\n      .pipe(map(res => res.json()));\r\n  }\r\n\r\n  storeUserData(token, user) {\r\n    localStorage.setItem('id_token', token);\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n    this.authToken = token;\r\n    this.user = user;\r\n  }\r\n\r\n  loadToken() {\r\n    const token = localStorage.getItem('id_token');\r\n    this.authToken = token;\r\n  }\r\n\r\n   loggedIn() {\r\n    return tokenNotExpired('id_token');\r\n   }\r\n\r\n  logout() {\r\n    this.authToken = null;\r\n    this.user = null;\r\n    localStorage.clear();\r\n  }\r\n\r\n  modifyUser(user) {\r\n    let headers = new Headers();\r\n    this.loadToken();\r\n    headers.append('Authorization', this.authToken);\r\n    headers.append('Content-Type', 'application/json');\r\n    return this.http.post(this.funcService.ServerAddress + '/users/modify', user, {headers: headers})\r\n      .pipe(map(res => res.json()));\r\n  }\r\n\r\n  administrateUser(_id, clean: Boolean) {\r\n    let headers = new Headers();\r\n    this.loadToken();\r\n    headers.append('Authorization', this.authToken);\r\n    headers.append('Content-Type', 'application/json');\r\n    return this.http.post(this.funcService.ServerAddress + '/users/admin', {_id: _id, clean: clean}, {headers: headers})\r\n      .pipe(map(res => res.json()));\r\n  }\r\n\r\n  getAllUsers() {\r\n    let headers = new Headers();\r\n    this.loadToken();\r\n    headers.append('Authorization', this.authToken);\r\n    headers.append('Content-Type', 'application/json');\r\n    return this.http.post(this.funcService.ServerAddress + '/users/getAllUsers', {}, {headers: headers})\r\n      .pipe(map(res => res.json()));\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Http, Headers } from '@angular/http';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { FuncService } from './func.service';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BoardService {\r\n  authToken: any;\r\n\r\n  constructor(\r\n    private http: Http,\r\n    private funcService: FuncService,\r\n    private authService: AuthService\r\n  ) { }\r\n\r\n  private loadToken() {\r\n    const token = localStorage.getItem('id_token');\r\n    this.authToken = token;\r\n  }\r\n\r\n  takeOnePost(num) {\r\n    let headers = new Headers();\r\n    headers.append('Content-Type', 'application/json');\r\n    let loggedIn = this.authService.loggedIn() ? 'yes' : 'no';\r\n    return this.http.get(this.funcService.ServerAddress + '/boards/takeOnePost?num=' + num + '&loggedIn=' + loggedIn, {headers: headers})\r\n      .pipe(map(res => res.json()))\r\n  }\r\n\r\n  takeAllPosts(type) {\r\n    let headers = new Headers();\r\n    headers.append('Content-Type', 'application/json');\r\n    return this.http.get(this.funcService.ServerAddress + '/boards/takeAllPosts?type=' + type, {headers: headers})\r\n      .pipe(map(res => res.json()));\r\n  }\r\n\r\n  writePost(post) {\r\n    let headers = new Headers();\r\n    this.loadToken();\r\n    headers.append('Authorization', this.authToken);\r\n    headers.append('Content-Type', 'application/json');\r\n    return this.http.post(this.funcService.ServerAddress + '/boards/write', post, {headers: headers})\r\n      .pipe(map(res => res.json()));\r\n  }\r\n\r\n  writeComment(cmt) {\r\n    let headers = new Headers();\r\n    this.loadToken();\r\n    headers.append('Authorization', this.authToken);\r\n    headers.append('Content-Type', 'application/json');\r\n    return this.http.post(this.funcService.ServerAddress + '/boards/writeComment', cmt, {headers: headers})\r\n      .pipe(map(res => res.json()));\r\n  }\r\n\r\n  removePost(num) {\r\n    let headers = new Headers();\r\n    headers.append('Content-Type', 'application/json');\r\n    return this.http.post(this.funcService.ServerAddress + '/boards/removePost', {num: num}, {headers: headers})\r\n      .pipe(map(res => res.json()));\r\n  }\r\n\r\n  removeComment(postNum, cmtNum) {\r\n    let headers = new Headers();\r\n    headers.append('Content-Type', 'application/json');\r\n    return this.http.post(this.funcService.ServerAddress + '/boards/removeComment', {postNum: postNum, cmtNum: cmtNum}, {headers: headers})\r\n      .pipe(map(res => res.json()));\r\n  }\r\n\r\n  recommend(num) {\r\n    let headers = new Headers();\r\n    this.loadToken();\r\n    headers.append('Authorization', this.authToken);\r\n    headers.append('Content-Type', 'application/json');\r\n    return this.http.post(this.funcService.ServerAddress + '/boards/recommend', {num: num}, {headers: headers})\r\n      .pipe(map(res => res.json()));\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\nimport { Http, Headers } from '@angular/http';\r\nimport { map } from 'rxjs/operators';\r\n\r\nfunction _window() {\r\n  return window;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FuncService {\r\n  public ServerAddress: String = \"http://localhost:3000\";\r\n\r\n  private previousUrl: string = undefined;\r\n  private currentUrl: string = undefined;\r\n\r\n  authToken: any;\r\n\r\n  constructor(\r\n    private titleService: Title,\r\n    private router: Router,\r\n    private http: Http\r\n  ) {\r\n    this.currentUrl = this.router.url;\r\n    this.router.events.subscribe(event => {\r\n      if ( event instanceof NavigationEnd ) {\r\n        this.previousUrl = this.currentUrl;\r\n        this.currentUrl = event.url;\r\n      }\r\n    })\r\n  }\r\n\r\n  loadToken() {\r\n    const token = localStorage.getItem('id_token');\r\n    this.authToken = token;\r\n  }\r\n\r\n  setTitle(title: string) {\r\n    this.titleService.setTitle(title + ' :: RWrite');\r\n  }\r\n\r\n  getPreviousUrl() {\r\n    return this.previousUrl;\r\n  }\r\n\r\n  openWindow(url: string) {\r\n    const option = 'width=500, height=600, left=300, top=100, scrollbars=yes, toolbars=no, location=no';\r\n    _window().open(url, '', option);\r\n  }\r\n\r\n  openInfoWindow(userid) {\r\n    this.openWindow(this.ServerAddress + '/modals/info?userid=' + userid);\r\n  }\r\n\r\n  openWindowWithAuth(url: string, userid: string) {\r\n    let headers = new Headers();\r\n    this.loadToken();\r\n    headers.append('Authorization', this.authToken);\r\n    headers.append('Content-Type', 'application/json');\r\n    this.http.post(this.ServerAddress + '/modals/getCode', {userid: userid}, {headers: headers})\r\n      .pipe(map(res => res.json())).subscribe(data => {\r\n        const code = data.code;\r\n        this.openWindow(url + '&c=' + code);\r\n      });\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Http, Headers } from '@angular/http';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { FuncService } from './func.service';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GameService {\r\n  authToken: any;\r\n\r\n  constructor(\r\n    private http: Http,\r\n    private funcService: FuncService,\r\n    private authService: AuthService\r\n  ) { }\r\n\r\n  private loadToken() {\r\n    const token = localStorage.getItem('id_token');\r\n    this.authToken = token;\r\n  }\r\n\r\n  takeOnePost(num) {\r\n    let headers = new Headers();\r\n    headers.append('Content-Type', 'application/json');\r\n    let loggedIn = this.authService.loggedIn() ? 'yes' : 'no';\r\n    return this.http.get(this.funcService.ServerAddress + '/games/takeOnePost?num=' + num + '&loggedIn=' + loggedIn, {headers: headers})\r\n      .pipe(map(res => res.json()))\r\n  }\r\n\r\n  takeAllPosts() {\r\n    let headers = new Headers();\r\n    headers.append('Content-Type', 'application/json');\r\n    return this.http.get(this.funcService.ServerAddress + '/games/takeAllPosts', {headers: headers})\r\n      .pipe(map(res => res.json()));\r\n  }\r\n\r\n  writeGame(content) {\r\n    let headers = new Headers();\r\n    this.loadToken();\r\n    headers.append('Authorization', this.authToken);\r\n    headers.append('Content-Type', 'application/json');\r\n    return this.http.post(this.funcService.ServerAddress + '/games/write', {content: content}, {headers: headers})\r\n      .pipe(map(res => res.json()));\r\n  }\r\n\r\n  removePost(num) {\r\n    let headers = new Headers();\r\n    headers.append('Content-Type', 'application/json');\r\n    return this.http.post(this.funcService.ServerAddress + '/games/removePost', {num: num}, {headers: headers})\r\n      .pipe(map(res => res.json()));\r\n  }\r\n\r\n  removeComment(postNum, cmtNum) {\r\n    let headers = new Headers();\r\n    headers.append('Content-Type', 'application/json');\r\n    return this.http.post(this.funcService.ServerAddress + '/games/removeComment', {postNum: postNum, cmtNum: cmtNum}, {headers: headers})\r\n      .pipe(map(res => res.json()));\r\n  }\r\n\r\n  recommend(num, isRecommend: Boolean) {\r\n    let headers = new Headers();\r\n    this.loadToken();\r\n    headers.append('Authorization', this.authToken);\r\n    headers.append('Content-Type', 'application/json');\r\n    return this.http.post(this.funcService.ServerAddress + '/games/recommend', {num: num, isRecommend: isRecommend}, {headers: headers})\r\n      .pipe(map(res => res.json()));\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ValidateService {\r\n\r\n  constructor() { }\r\n\r\n  validateRegister(user) {\r\n    if ( user.userid == undefined || user.email == undefined || user.pw == undefined || user.pwchk == undefined || user.introduction == undefined ) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  validateConditions(user) {\r\n    // let idvalid = /^[a-z]+[a-z0-9]{6,15}$/g;\r\n    // if ( !idvalid.test(user.userid) ) {\r\n    //   return {\r\n    //     valid: false,\r\n    //     msg: '아이디는 영어, 숫자로 이루어진 6~15 글자여야 합니다.'\r\n    //   };\r\n    // }\r\n\r\n    // let pwvalid = /^{10,}/;\r\n    // if ( !pwvalid.test(user.pw) ) {\r\n    //   return {\r\n    //     valid: false,\r\n    //     msg: '비밀번호는 10글자 이상이어야 합니다.'\r\n    //   }\r\n    // }\r\n\r\n    // let nickValid = /^[a-Zㄱ-힣0-9]{4,8}$/;\r\n    // if ( !nickValid.test(user.nickname) ) {\r\n    //   return {\r\n    //     valid: false,\r\n    //     msg: '닉네임은 한글, 알파벳, 숫자로 이루어진 4~8 글자여야 합니다.'\r\n    //   }\r\n    // }\r\n\r\n    return {\r\n      valid: true\r\n    }\r\n  }\r\n\r\n  validateEmail(email) {\r\n    var re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(email);\r\n  }\r\n\r\n  validateModify(user) {\r\n    return !(user.pw == undefined || user.pw == '' ||\r\n        user.nickname == undefined || user.nickname == '' ||\r\n        user.introduction == undefined || user.introduction == '');\r\n  }\r\n\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import 'hammerjs';\n\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n// class to be available youtube on the boards\r\n@Pipe({\r\n  name: 'youtube',\r\n})\r\nexport class Youtube implements PipeTransform {\r\n  constructor (private dom: DomSanitizer) {\r\n\r\n  }\r\n  transform(value: string, args) {\r\n    return this.dom.bypassSecurityTrustHtml(value);\r\n  }\r\n}\r\n"],"sourceRoot":""}
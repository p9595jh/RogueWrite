extends layout2
block content

    div#workspaceFantasy(style='height: 550px; width: 100%;')
    br

    div(style="text-align: center;")
        p#msg
        div(class="mdl-textfield mdl-js-textfield")
            input(class="mdl-textfield__input", type="text", id="t1", placeholder="HTML 태그")
        span &nbsp;&nbsp;&nbsp;
        button(class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect", style='width: 100px; height: 30px;', onclick='openEditor()') 에디터
        span &nbsp;&nbsp;&nbsp;
        button#save(class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--colored", style='width: 100px; height: 30px;', onclick='save()') 저장
        span &nbsp;&nbsp;&nbsp;
        button#test(class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent", style='width: 100px; height: 30px;', onclick='tsave()') 임시저장
        - if ( temps != undefined && temps.length > 0 )
            span &nbsp;&nbsp;&nbsp;
            button#load(class="mdl-button mdl-js-button mdl-js-ripple-effect", style='width: 100px; height: 30px;') 불러오기
            ul(class="mdl-menu mdl-menu--top-right mdl-js-menu mdl-js-ripple-effect", for='load')
                each val in temps
                    li(class="mdl-menu__item", onclick='location.href="./tool?uid=' + uid + '&_id=' + val._id + '&c=' + c + '"')= val.title + ' (' + val.savedate + ')'

        - if ( temps != undefined && temps.length > 0 && temp )
            span &nbsp;&nbsp;&nbsp;
            button#adding(class="mdl-button mdl-js-button mdl-js-ripple-effect", style='width: 100px; height: 30px;') 덧붙이기
            ul(class="mdl-menu mdl-menu--top-right mdl-js-menu mdl-js-ripple-effect", for='adding')
                each val in temps
                    li(class="mdl-menu__item", onclick='adds("' + val._id + '")')= val.title + ' (' + val.savedate + ')'

    
    xml#toolbox(style='display: none')
        category(name='big_one')
            block(type='stage')
            block(type='phase')
            block(type='choice')
        category(name='small_one')
            block(type='text')
            block(type='math_number')
            block(type='condition')
            block(type='parameter')
            block(type='math_arithmetic')
        category(name='variable', custom='VARIABLE')
    
    xml#startBlocks(style="display: none;")
        block(type="game", inline="false", x="200", y="50")

    div#tempData(style="display: none;") #{temp}
    div#uid(style="display: none;") #{uid}

    script.
        //- @ set default workspace (workspaceFantasy)
        var workspaceFantasy = Blockly.inject('workspaceFantasy', {
            media: '../resources/blockly/google-blockly-82871b3/media/',
            comments : false,
            zoom: {
                controls: true,
                wheel: true,
                startScale: 1.0,
                maxScale: 3,
                minScale: 0.3,
                scaleSpeed: 1.2
            },
            toolbox: document.getElementById('toolbox')
        });
        Blockly.Xml.domToWorkspace(document.getElementById('startBlocks'), workspaceFantasy);
        //- ========================================

        //- @ function for viewing success/error messages
        const msg = document.getElementById("msg");
        function setMessage(text, color, time) {
            msg.innerHTML = text;
            msg.style.color = color;
            setTimeout(() => {msg.innerHTML = ''}, time);
        }
        //- ========================================

        //- @ function for adding another block
        function adds(addId) {
            let xhr = new XMLHttpRequest();
            xhr.open('POST', './addBlock');
            xhr.setRequestHeader('Content-type', 'application/json');
            xhr.send(JSON.stringify({addId: addId}));

            xhr.addEventListener('load', () => {
                let result = JSON.parse(xhr.responseText);
                if ( result.fail ) alert('불러오기 오류');
                else {
                    for (let i=0; i<result.block.length; i++) {
                        setTimeout(() => {
                            Blockly.Events.fromJson(result.block[i], workspaceFantasy).run(true);
                        }, (i++) * 500);
                        //- Blockly.Events.fromJson(result.block[i], workspaceFantasy).run(true);
                    }
                }
            });
        }
        //- ========================================

        //- @ temp save function
        var blocks = [];
        function tsave() {
            //- for (let block of blocks) console.log(block);

            if ( document.getElementById('tempData').innerHTML != '' ) {    // when working with temp data
                let xhr = new XMLHttpRequest();
                xhr.open('POST', './tempSave');
                xhr.setRequestHeader('Content-type', 'application/json');
                xhr.send(JSON.stringify({
                    block: blocks,
                    _id: document.getElementById('tempData').innerHTML,
                    uid: document.getElementById('uid').innerHTML
                }));

                xhr.addEventListener('load', () => {
                    let result = JSON.parse(xhr.responseText);
                    if ( result.success ) alert('임시저장 되었습니다');
                    else alert('임시저장 오류');
                });
            } else {
                let title = prompt('임시저장용 제목을 입력해주세요.');
                if ( title == null ) return;

                let xhr = new XMLHttpRequest();
                xhr.open('POST', './tempSave');
                xhr.setRequestHeader('Content-type', 'application/json');
                xhr.send(JSON.stringify({
                    block: blocks,
                    title: title,
                    uid: document.getElementById('uid').innerHTML
                }));

                xhr.addEventListener('load', () => {
                    let result = JSON.parse(xhr.responseText);
                    if ( result.success ) {
                        document.getElementById('tempData').innerHTML = result._id;
                        alert('임시저장 되었습니다');
                    }
                    else alert('임시저장 오류');
                });
            }
        }
        //- ========================================

        //- @ set blocks from temp data to the default workspace
        if ( document.getElementById('tempData').innerHTML != '' ) {
            workspaceFantasy.clear();
            blocks = [];
            let temp = !{JSON.stringify(block)};
            let i = 0;
            for (let block of temp) {
                setTimeout(() => {
                    Blockly.Events.fromJson(block, workspaceFantasy).run(true);
                    if ( block.saveby ) {
                        blocks[blocks.length-1].saveby = block.saveby;
                        blocks[blocks.length-1].savedate = block.savedate;
                    }
                }, (i++) * 4);
                //- Blockly.Events.fromJson(block, workspaceFantasy).run(true);
            }
            //- blocks = temp;
        }
        //- ========================================

        //- @ add event listener to the default workspace
        workspaceFantasy.addChangeListener((event) => {
            if ( event.type == Blockly.Events.UI ) return;
            let block = {block: event.toJson()};
            if ( block.block.type == 'finished_loading' ) return;
            blocks.push(block.block);
        });
        //- ========================================

        //- @ function to save
        function save() {
            let code = Blockly.JavaScript.workspaceToCode(workspaceFantasy);
            //- title(string), stage(array), param(array), score(string)

            try {
                code = JSON.parse(code);
                code.block = blocks;
                code._id = document.getElementById('tempData').innerHTML;
                code = JSON.stringify(code);
            } catch (e) {
                setMessage("에러가 발생하였습니다: " + e, "red", 2000);
                return false;
            }

            let xhr = new XMLHttpRequest();
            xhr.open('POST', './save');
            xhr.setRequestHeader('Content-type', 'application/json');
            xhr.send(code);

            xhr.addEventListener('load', () => {
                let result = JSON.parse(xhr.responseText);
                if ( result.success ) {
                    setMessage("저장되었습니다.", "blue", 1500);
                }
                else {
                    setMessage(result.msg, "red", 2000);
                }
            });
        }
        //- ========================================

        //- @ function to open editor
        function openEditor() {
            let w = 950;
            let h = 700;
            
            let x = (window.screen.width / 2) - (w / 2);
            let y = (window.screen.height / 2) - (h / 2);

            let tags = document.getElementById("t1").value;

            let option = "width=" + w +", height=" + h + ", resizable=no, scrollbars=no, status=no, left=" + x + ", top=" + y + ", screenX=" + x + ", screenY=" + y;
            window.open("./editor?tags=" + tags, "", option);
        }
